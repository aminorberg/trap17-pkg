m
tmp <- sampleMcmc(m, samples=100)
library(devtools)
install_github("hmsc-r/HMSC", #
                 build_opts = c("--no-resave-data", #
                                "--no-manual"))
library(Hmsc)#
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
install.packages("Hmsc")
library(Hmsc)
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))#
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
library(devtools)
install_github("hmsc-r/HMSC", #
                build_opts = c("--no-resave-data", #
                               "--no-manual"))
library(Hmsc)
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))#
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
ps <- sampleMcmc(m, samples = 100, alignPost=FALSE)
m
sampling_settings <- list(totsamp = 100000, #
                          trans = 50000, #
                          thn = 10, #
                          nFolds = 5)
m
m$rL
m$rL$sample
str(m$rL$sample)
vars$samps
library("trap17")
dat <- trapdata#
str(dat)
80*4
# 1 DATA: importation and raw data figures#
rm(list = ls(all = TRUE)) ; gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17-pkg"#
setwd(working_dir)#
library("trap17")#
#
dirs <- set_dirs(working_dir = working_dir, raw_data = TRUE)
dat <- trapdata#
#str(dat)#
colSums(dat$Y_pooled)
library(cooccur)
cooc_test_genot <- list()
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )    #
}
cooc_test_genot
cooc_test_genot <- list()
g<-1
g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]
com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])
com
cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)
g<-2
g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])
com
cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)
cooc_test_genot[[g]]
com
cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = FALSE
cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = FALSE)
cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = FALSE)
cooc_test_genot[[g]]
cooc_test_genot <- list()#
#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = FALSE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )    #
}
cooc_test_genot
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )    #
}
cooc_test_genot
cooc_test <- cooccur(mat = t(dat$Y_pooled),#
                     type = "spp_site",#
                     spp_names = TRUE,#
                     thresh = TRUE)
cooc_test
cooc_test <- cooccur(mat = t(dat$Y_pooled),#
                     type = "spp_site",#
                     spp_names = TRUE,#
                     thresh = FALSE)
cooc_test
cooc_test$positive
cooc_test$results
cooc_test_genot[[1]]$results
cooc_test_genot[[2]]$results
cooc_test_genot[[3]]$results
cooc_test_genot[[4]]$results
cooc_test_genot[[3]]$results
cooc_test_genot[[2]]$results
# TRAP17 ANALYSIS 2020
# 1 DATA: importation and raw data figures#
rm(list = ls(all = TRUE)) ; gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17-pkg"#
setwd(working_dir)#
library("trap17")
dirs <- set_dirs(working_dir = working_dir, raw_data = TRUE)
dat <- trapdata
foldname <- "trap17_totsamp2e+05"
pss <- load_objects_from_dir(path = dirs$fits, #
                             study = foc_study,#
                             obj_type = "ps")
foc_study <- "trap17_totsamp2e+05"
foc_study <- "trap17_totsamp2e+05"#
foldname <- "trap17_totsamp2e+05"
# 3.3 results for the best model variant#
pss <- load_objects_from_dir(path = dirs$fits, #
                             study = foc_study,#
                             obj_type = "ps")
foc_study <- "trap17_totsamp2e"
pss <- load_objects_from_dir(path = dirs$fits, #
                             study = foc_study,#
                             obj_type = "ps")#
names(pss)
whichPs <- 3#
ps <- pss[[whichPs]]
library(wesanderson)#
wesandcols <- wes_palette("Cavalcanti1")[5:1]
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
    selnames <- c("Intercept", #
                  "Plant.area", #
                  "Population", #
                  "Genotype", #
                  "Herbivory")
if (whichPs == 5 | whichPs == 6) {#
        selnames <- selnames[-which(selnames == "Genotype")]#
        sel <- c(1, 2, rep(3, 3), 4)#
    }
vp <- Hmsc::computeVariancePartitioning(ps, #
                                      group = sel, #
                                      groupnames = selnames)
vp
whichPs <- 4#
ps <- pss[[whichPs]]
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
    selnames <- c("Intercept", #
                  "Plant.area", #
                  "Population", #
                  "Genotype", #
                  "Herbivory")#
#
    if (whichPs == 5 | whichPs == 6) {#
        selnames <- selnames[-which(selnames == "Genotype")]#
        sel <- c(1, 2, rep(3, 3), 4)#
    }#
    vp <- Hmsc::computeVariancePartitioning(ps, #
                                      group = sel, #
                                      groupnames = selnames)
vp
names(pss)#
whichPs <- 3#
ps <- pss[[whichPs]]#
#
library(wesanderson)#
wesandcols <- wes_palette("Cavalcanti1")[5:1]
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
    selnames <- c("Intercept", #
                  "Plant.area", #
                  "Population", #
                  "Genotype", #
                  "Herbivory")#
#
    if (whichPs == 5 | whichPs == 6) {#
        selnames <- selnames[-which(selnames == "Genotype")]#
        sel <- c(1, 2, rep(3, 3), 4)#
    }#
    vp <- Hmsc::computeVariancePartitioning(ps, #
                                      group = sel, #
                                      groupnames = selnames)#
    toPlot <- vp$vals[-1,]#
    toPlot <- toPlot[nrow(toPlot):1,]#
    toPlot <- toPlot[, colnames(ps$Y)[order(colSums(ps$Y), decreasing = TRUE)]]#
    cov_order <- switch(as.character(whichPs), #
                        "3" = c("Genotype", "Population", "Plant.area", "Herbivory"), #
                        "4" = c("Genotype", "Population", "Plant.area", "Herbivory", "Random: Plant"), #
                        "5" = c("Population", "Plant.area", "Herbivory", "Random: Plant"),#
                        "6" = c("Population", "Plant.area", "Herbivory", "Random: Plant", "Random: Genotype"),#
                        "7" = c("Genotype", "Population", "Plant.area", "Herbivory", "Random: Plant"))#
    toPlot <- toPlot[cov_order, ]#
    round(rowMeans(toPlot*100), 2)
wesandcols_sel <- wesandcols[1:nrow(toPlot)]
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
        barplot(toPlot, #
                col = wesandcols_sel,#
                xpd = TRUE,#
                las = 2)#
        legend(x = 6.25, y = 1, #
               legend = rownames(toPlot)[nrow(toPlot):1],#
               fill = wesandcols_sel[length(wesandcols_sel):1])
file.path(dirs$fits, #
                         foldname, #
                         "figs",#
                         paste0("varpart_", #
                                whichPs,#
                                ".pdf")#
                        )
wesandcols_sel <- wesandcols[1:nrow(toPlot)]#
    pdf(file = file.path(dirs$fits, #
                         foldname, #
                         "figs",#
                         paste0("varpart_", #
                                whichPs,#
                                ".pdf")#
                        ),#
        bg = "white", #
        width = 7, #
        height = 5)#
        par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
        barplot(toPlot, #
                col = wesandcols_sel,#
                xpd = TRUE,#
                las = 2)#
        legend(x = 6.25, y = 1, #
               legend = rownames(toPlot)[nrow(toPlot):1],#
               fill = wesandcols_sel[length(wesandcols_sel):1])#
    dev.off()
library(circleplot)
whichPs <- 4
whichPs <- 4#
ps <- pss[[whichPs]]
if (whichPs == 7) {#
    omgcors <- trap17:::computeAssociations_modified(ps)#
    lev <- 1#
    supportLevel <- 0#
    toPlot <- ((omgcors[[lev]]$support > supportLevel)#
              + (omgcors[[lev]]$support < (1-supportLevel)) > 0) * omgcors[[lev]]$mean#
    toPlotDist <- list()#
    for (i in 1:dim(toPlot)[3]) {#
        toPlotDist[[i]] <- as.dist(toPlot[,,i])#
        toPlotDist[[i]][which(toPlotDist[[i]] == 0)] <- NA#
    }#
} else {#
    OmegaCor <- Hmsc:::computeAssociations(ps)#
    lev <- 1#
    supportLevel <- 0#
    toPlot <- ((OmegaCor[[lev]]$support > supportLevel)#
              + (OmegaCor[[lev]]$support < (1-supportLevel)) > 0) * OmegaCor[[lev]]$mean#
    toPlotDist <- as.dist(toPlot)#
    toPlotDist[which(toPlotDist == 0)] <- NA#
}
OmegaCor[[lev]]$support
whichPs <- 3#
ps <- pss[[whichPs]]
cooc_test <- cooccur(mat = t(dat$Y_pooled),#
                     type = "spp_site",#
                     spp_names = TRUE,#
                     thresh = TRUE)
cooc_test
cooc_test$results
cooc_test$positive
cooc_test$negative
cooc_test_genot[[2]]$results
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )    #
}
cooc_test_genot[[2]]$results
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
    print(g1) #
}
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
        print(g1) #
    )#
}
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    print(g1) #
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
}
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    print(g1) #
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
}
names(cooc_test_genot)
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
    names(cooc_test_genot)[g] <- g1#
}
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
    dimnames(cooc_test_genot)[g] <- g1#
}
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
    names(cooc_test_genot)[[g]] <- g1#
}
sort(unique(dat$X_pooled[,"Genotype"]))
cooc_test_genot[prev_ord_genot]
prev_ord_pop <- c(3, 2, 4, 1)#
prev_ord_genot <- c(2, 4, 1, 3)
cooc_test_genot <- cooc_test_genot[prev_ord_genot]
cooc_test_genot
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
}
cooc_test_genot
cooc_test_genot[prev_ord_genot]
cooc_test_genot <- cooc_test_genot[prev_ord_genot]
cooc_test_genot
cv_preds <- load_objects_from_dir(path = dirs$fits, #
                                  study = foc_study,#
                                 obj_type = "cv_preds")
names(cv_preds)
cv_preds_variant <- cv_preds[[whichPs]]
yarr <- cv_preds_variant#
dimnames(yarr) <- list(1:dim(yarr)[1],#
                       colnames(dat$Y_pooled),#
                       1:dim(yarr)[3])
modelled_combs[[i]] <- co_occ_combs(partition = dat$X_pooled[,c("Genotype",#
                                                                 "Population")],#
                                     Y_arr = yarr)
modelled_combs <- vector(mode = "list", length = length(whichPs))
modelled_combs
yarr <- cv_preds_variant#
dimnames(yarr) <- list(1:dim(yarr)[1],#
                       colnames(dat$Y_pooled),#
                       1:dim(yarr)[3])#
modelled_combs <- co_occ_combs(partition = dat$X_pooled[,c("Genotype",#
                                                           "Population")],#
                               Y_arr = yarr)
dim(modelled_combs)
dimnames(modelled_combs)
as.character(unique(unlist(lapply(dimnames(modelled_combs, #
                                                            ), #
                                                            '[', #
                                                            1))))
dimnames(modelled_combs)
dimnames(modelled_combs)[[1]]
as.character(unique(unlist(dimnames(modelled_combs)[[1]])))
all_virus_combs <- as.character(unique(unlist( dimnames(modelled_combs)[[1]])))
sapply(all_virus_combs, nchar)
all_virus_combs <- all_virus_combs[order(sapply(all_virus_combs, nchar), decreasing = TRUE)]
all_virus_combs
all_virus_combs <- c("Empty", all_virus_combs[-which(all_virus_combs == "Empty")])
all_virus_combs
dim(cv_preds_variant)
length(cv_preds_variant)
is.list(cv_preds_variant)
names(cv_preds)#
whichPs <- 3#
cv_preds_variant <- cv_preds[whichPs]
dim(cv_preds_variant)
str(cv_preds_variant)
whichPs <- 3#
cv_preds_variant <- cv_preds[whichPs]#
modelled_combs <- vector(mode = "list", length = length(cv_preds_variant))
length(modelled_combs)
i<-1
modelled_combs <- vector(mode = "list", length = length(cv_preds_variant))
yarr <- cv_preds_variant[[i]]
dimnames(yarr) <- list(1:dim(yarr)[1],#
                           colnames(dat$Y_pooled),#
                           1:dim(yarr)[3])
dimnames(yarr)
modelled_combs[[i]] <- co_occ_combs(partition = dat$X_pooled[,c("Genotype",#
                                                                    "Population")],#
                                        Y_arr = yarr)
str(modelled_combs[[i]])
all_virus_combs <- as.character(unique(unlist(lapply(lapply(modelled_combs, #
                                                            dimnames), #
                                                            '[', #
                                                            1))))
all_virus_combs <- all_virus_combs[order(sapply(all_virus_combs, nchar), #
                                         decreasing = TRUE)]#
all_virus_combs <- c("Empty", all_virus_combs[-which(all_virus_combs == "Empty")])
all_virus_combs
prev_ord_pop <- c(3, 2, 4, 1)#
prev_ord_genot <- c(2, 4, 1, 3)
colrs <- load_colour_palette()#
colmat <- cbind(all_virus_combs, colrs[[2]])#
rownames(colmat) <- colmat[,1]#
#
colmat_legend <- gsub("Ca", "Cau", colmat)#
colmat_legend <- gsub("Pl", "Cap", colmat_legend)
prev_ord_pop <- c(3, 2, 4, 1)#
prev_ord_genot <- c(2, 4, 1, 3)
colrs <- load_colour_palette()#
colmat <- cbind(all_virus_combs, colrs[[2]])#
rownames(colmat) <- colmat[,1]#
#
colmat_legend <- gsub("Ca", "Cau", colmat)#
colmat_legend <- gsub("Pl", "Cap", colmat_legend)
prev_ord_pop <- c(3, 2, 4, 1)#
prev_ord_genot <- c(2, 4, 1, 3)
quartz()
par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
            tmp12 <- orig_combs[,g,p][rownames(colmat)]#
            tmp11 <- cbind(tmp11, tmp12)#
        }#
    if (any(is.na(tmp11))) { #
        tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
    }#
    colrs1 <- colmat[rownames(tmp11), 2]#
    colrs1 <- colrs1[nrow(tmp11):1]#
    barplot(tmp11[nrow(tmp11):1,],#
            col = colrs1,#
            xaxt = "n")#
    }
orig_combs <- co_occ_combs(partition = dat$X_pooled[,c("Genotype","Population")],#
                           Y_arr = array(dat$Y_pooled, #
                                         dim = c(nrow(dat$Y_pooled), #
                                                 ncol(dat$Y_pooled), #
                                                 1),#
                                         dimnames = list(1:nrow(dat$Y_pooled),#
                                                         colnames(dat$Y_pooled),#
                                                         1)))
quartz()#
    par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
            tmp12 <- orig_combs[,g,p][rownames(colmat)]#
            tmp11 <- cbind(tmp11, tmp12)#
        }#
    if (any(is.na(tmp11))) { #
        tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
    }#
    colrs1 <- colmat[rownames(tmp11), 2]#
    colrs1 <- colrs1[nrow(tmp11):1]#
    barplot(tmp11[nrow(tmp11):1,],#
            col = colrs1,#
            xaxt = "n")#
    }
prev_ord_genot
length(modelled_combs)
i<-1
par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp12 <- NULL#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
                tmp12 <- modelled_combs[[i]][,g,p][rownames(colmat)]#
                tmp11 <- cbind(tmp11, tmp12)#
        }#
        if (any(is.na(tmp11))) { #
            tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
        }#
        colrs1 <- colmat[rownames(tmp11), 2]#
        colrs1 <- colrs1[nrow(tmp11):1]#
        barplot(tmp11[nrow(tmp11):1,],#
                col = colrs1,#
                xaxt = "n")#
                #legend.text = rownames(tmp11)[nrow(tmp11):1])#
    }
whichPs[i]
file.path(dirs$fits, #
                         foldname, #
                         "figs",#
                         paste0("co_occs_ps", #
                                whichPs[i],#
                                ".pdf")#
                        )
# 3.2.5 predicted co-occurrence combinations (Fig 4)#
for (i in c(1:length(modelled_combs))) {#
    pdf(file = file.path(dirs$fits, #
                         foldname, #
                         "figs",#
                         paste0("co_occs_ps", #
                                whichPs[i],#
                                ".pdf")#
                        ),#
        bg = "transparent", #
        width = 15, #
        height = 5)#
    par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp12 <- NULL#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
                tmp12 <- modelled_combs[[i]][,g,p][rownames(colmat)]#
                tmp11 <- cbind(tmp11, tmp12)#
        }#
        if (any(is.na(tmp11))) { #
            tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
        }#
        colrs1 <- colmat[rownames(tmp11), 2]#
        colrs1 <- colrs1[nrow(tmp11):1]#
        barplot(tmp11[nrow(tmp11):1,],#
                col = colrs1,#
                xaxt = "n")#
                #legend.text = rownames(tmp11)[nrow(tmp11):1])#
    }#
    dev.off()#
}
pdf(file = file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     "orig_cooccs.pdf"),#
    bg = "transparent", #
    width = 15, #
    height = 5)#
    par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
            tmp12 <- orig_combs[,g,p][rownames(colmat)]#
            tmp11 <- cbind(tmp11, tmp12)#
        }#
    if (any(is.na(tmp11))) { #
        tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
    }#
    colrs1 <- colmat[rownames(tmp11), 2]#
    colrs1 <- colrs1[nrow(tmp11):1]#
    barplot(tmp11[nrow(tmp11):1,],#
            col = colrs1,#
            xaxt = "n")#
    }#
dev.off()
# 3.5.1 cooccurrence by genotype test#
library(cooccur)#
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
}
cooc_test_genot[[1]]$results
cooc_test_genot[[2]]$results
cooc_test_genot[[3]]$results
cooc_test_genot[prev_ord_genot][[1]]$results
cooc_test_genot[prev_ord_genot][[2]]$results
cooc_test_genot[prev_ord_genot][[3]]$results
cooc_test_genot[prev_ord_genot][[4]]$results
par(family = "serif", mfrow = c(1, length(cooc_genot)))#
    for (g in 1:length(cooc_genot)) {#
        toPlotDist <- as.dist(cooc_genot[prev_ord_genot][[g]])#
        circleplot:::circleplot(toPlotDist, #
                   cluster = FALSE,#
                   style = "classic",#
                   plot.control = list(point.labels = TRUE,#
                                       cex.point = 5,#
                                       line.breaks = c(-1,0,1,8,100),#
                                       line.cols = c("#d9d9d9", #
                                                     "#faeaee", #
                                                     "#e795aa", #
                                                     "#c60032"),#
                                       line.widths = 5))#
    }
cooc_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    cooc_genot[[g]] <- crossprod(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    rownames(cooc_genot[[g]]) <- gsub("Ca", "Cau", rownames(cooc_genot[[g]]))#
    rownames(cooc_genot[[g]]) <- gsub("Pl", "Cap", rownames(cooc_genot[[g]]))#
    colnames(cooc_genot[[g]]) <- rownames(cooc_genot[[g]])#
}
par(family = "serif", mfrow = c(1, length(cooc_genot)))#
    for (g in 1:length(cooc_genot)) {#
        toPlotDist <- as.dist(cooc_genot[prev_ord_genot][[g]])#
        circleplot:::circleplot(toPlotDist, #
                   cluster = FALSE,#
                   style = "classic",#
                   plot.control = list(point.labels = TRUE,#
                                       cex.point = 5,#
                                       line.breaks = c(-1,0,1,8,100),#
                                       line.cols = c("#d9d9d9", #
                                                     "#faeaee", #
                                                     "#e795aa", #
                                                     "#c60032"),#
                                       line.widths = 5))#
    }
# NOTE: genotypes ordered by prevalence#
pdf(file = file.path(dirs$wd,#
                     "cooccurrences_genot.pdf"),#
    bg = "transparent", #
    width = 13, #
    height = 3)#
    par(family = "serif", mfrow = c(1, length(cooc_genot)))#
    for (g in 1:length(cooc_genot)) {#
        toPlotDist <- as.dist(cooc_genot[prev_ord_genot][[g]])#
        circleplot:::circleplot(toPlotDist, #
                   cluster = FALSE,#
                   style = "classic",#
                   plot.control = list(point.labels = TRUE,#
                                       cex.point = 5,#
                                       line.breaks = c(-1,0,1,8,100),#
                                       line.cols = c("#d9d9d9", #
                                                     "#faeaee", #
                                                     "#e795aa", #
                                                     "#c60032"),#
                                       line.widths = 5))#
    }#
dev.off()#
cooc_all <- crossprod(dat$Y_pooled)#
#
rownames(cooc_all) <- gsub("Ca", "Cau", rownames(cooc_all))#
rownames(cooc_all) <- gsub("Pl", "Cap", rownames(cooc_all))#
colnames(cooc_all) <- rownames(cooc_all)#
#
toPlotDist <- as.dist(cooc_all)#
#
pdf(file = file.path(dirs$wd,#
                     "cooccurrences.pdf"),#
    bg = "transparent", #
    width = 3, #
    height = 3)#
    par(family = "serif")#
        circleplot:::circleplot(toPlotDist, #
                   cluster = FALSE,#
                   style = "classic",#
                   plot.control = list(point.labels = TRUE,#
                                       cex.point = 5,#
                                       line.breaks = c(-1,0,1,8,100),#
                                       line.cols = c("#d9d9d9", #
                                                     "#faeaee", #
                                                     "#e795aa", #
                                                     "#c60032"),#
                                       line.widths = 5))#
dev.off()
foc_study
pss <- load_objects_from_dir(path = dirs$fits, #
                             study = foc_study,#
                             obj_type = "ps")#
names(pss)#
whichPs <- 3#
ps <- pss[[whichPs]]
summary(mpost$Beta)
betaPost_ps <- Hmsc:::getPostEstimate(ps, "Beta", q = c(0.05, 0.95))
betaMeans_ps <- betaPost_ps$mean
rownames(betaMeans_ps) <- colnames(ps$X)
supportLevel <- 0.75#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)
betaSig
betas <- round(betaMeans_ps * betaSig, 2)
betas
supportLevel <- 0.95
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)#
#
write.csv(round(betaMeans_ps, 2), #
          file = file.path(dirs$fits, #
                           foldname, #
                           "figs",#
                            paste0("betameans_ps", whichPs, ".csv")))#
#
betas <- round(betaMeans_ps * betaSig, 2)#
betas
supportLevel <- 0.75#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)#
#
write.csv(round(betaMeans_ps, 2), #
          file = file.path(dirs$fits, #
                           foldname, #
                           "figs",#
                            paste0("betameans_ps", whichPs, ".csv")))#
#
betas <- round(betaMeans_ps * betaSig, 2)#
betas
supportLevel
supportLevel <- 0.75#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)#
#
write.csv(round(betaMeans_ps, 2), #
          file = file.path(dirs$fits, #
                           foldname, #
                           "figs",#
                            paste0("betameans_", supportLevel, "_ps", whichPs, ".csv")))
supportLevel <- 0.95#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)#
#
write.csv(round(betaMeans_ps, 2), #
          file = file.path(dirs$fits, #
                           foldname, #
                           "figs",#
                            paste0("betameans_", supportLevel, "_ps", whichPs, ".csv")))
betas
supportLevel <- 0.95#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)#
#
write.csv(round(betaMeans_ps, 2), #
          file = file.path(dirs$fits, #
                           foldname, #
                           "figs",#
                            paste0("betameans_ps", whichPs, ".csv")))#
#
betas <- round(betaMeans_ps * betaSig, 2)#
write.csv(round(betas, 2), #
          file = file.path(dirs$fits, #
                           foldname, #
                           "figs",#
                            paste0("betameans_", supportLevel, "_ps", whichPs, ".csv")))
supportLevel <- 0.75#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)#
#
write.csv(round(betaMeans_ps, 2), #
          file = file.path(dirs$fits, #
                           foldname, #
                           "figs",#
                            paste0("betameans_ps", whichPs, ".csv")))#
#
betas <- round(betaMeans_ps * betaSig, 2)#
write.csv(round(betas, 2), #
          file = file.path(dirs$fits, #
                           foldname, #
                           "figs",#
                            paste0("betameans_", supportLevel, "_ps", whichPs, ".csv")))
betas
supportLevel <- 0.75#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)
betas <- round(betaMeans_ps * betaSig, 2)
betas
supportLevel <- 0.95
supportLevel <- 0.95#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)
betas <- round(betaMeans_ps * betaSig, 2)
betas
?Hmsc
cooc_test$results
cooc_test
cooc_test$results
whichPs
names(pss)
whichPs <- 3
ps <- pss[[whichPs]]
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
    selnames <- c("Intercept", #
                  "Plant.area", #
                  "Population", #
                  "Genotype", #
                  "Herbivory")#
#
    if (whichPs == 5 | whichPs == 6) {#
        selnames <- selnames[-which(selnames == "Genotype")]#
        sel <- c(1, 2, rep(3, 3), 4)#
    }#
    vp <- Hmsc::computeVariancePartitioning(ps, #
                                      group = sel, #
                                      groupnames = selnames)
vp
rowMeans(vp)
rowMeans(vp$vals)
head(dat$X_pooled)
head(dat$X_pooled$Genotype)
dat$X_pooled[, "Genotype"]
dat$X_pooled[,"Genotype"] == 2
dat$Y_pooled[dat$X_pooled[,"Genotype"] == 2,]
which(dat$Y_pooled[,"Ca"])
dat$Y_pooled[dat$X_pooled[,"Genotype"] == 2,][which(dat$Y_pooled[,"Ca"] == 1)]
which(dat$Y_pooled[,"Ca"] == 1)
dat$Y_pooled[dat$X_pooled[,"Genotype"] == 2,][which(dat$Y_pooled[,"Ca"] == 1),]
dat$Y_pooled[dat$X_pooled[,"Genotype"] == 2,]
dat$Y_pooled[which(dat$Y_pooled[,"Ca"] == 1),]
cbind(dat$X_pooled[,"Genotype"], dat$Y_pooled)[which(dat$Y_pooled[,"Ca"] == 1),]
# 3.6 mixing#
whichPs <- 3#
ps <- pss[[whichPs]]
mpost <- Hmsc:::convertToCodaObject(ps)
psfrs <- coda:::gelman.diag(mpost$Beta)$psrf
psfrs
min(psfrs[,1])
max(psfrs[,1])
all((psfrs[,2] - psfrs[,1]) > 0)
sum(psfrs[,2] > 1.05)
par(family = "serif")#
    plot(x = 1:10, 1:10, type = 'n', xaxt = 'n', yaxt = 'n', xlab = "", ylab = "")#
    legend("topleft", #
           legend = c("No co-occurrences", "1 co-occurrence", "1-8 co-occurrences", ">8 co-occurrences"), #
           fill = c("#d9d9d9", #
                   "#faeaee", #
                   "#e795aa", #
                   "#c60032"), #
           bty = 'n')
pdf(file = file.path(dirs$wd, #
                     "raw_coocc_legend.pdf"),#
    bg = "transparent", #
    width = 3, #
    height = 3)#
    par(family = "serif")#
    plot(x = 1:10, 1:10, type = 'n', xaxt = 'n', yaxt = 'n', xlab = "", ylab = "")#
    legend("topleft", #
           legend = c("No co-occurrences",#
                      "1 co-occurrence", #
                      "1-8 co-occurrences", #
                      ">8 co-occurrences"), #
           fill = c("#d9d9d9", #
                   "#faeaee", #
                   "#e795aa", #
                   "#c60032"), #
           bty = 'n')#
dev.off()
pdf(file = file.path(dirs$wd, #
                     "raw_coocc_legend.pdf"),#
    bg = "transparent", #
    width = 5, #
    height = 3)#
    par(family = "serif")#
    plot(x = 1:10, 1:10, type = 'n', xaxt = 'n', yaxt = 'n', xlab = "", ylab = "")#
    legend("topleft", #
           legend = c("No co-occurrences",#
                      "1 co-occurrence", #
                      "1-8 co-occurrences", #
                      ">8 co-occurrences"), #
           fill = c("#d9d9d9", #
                   "#faeaee", #
                   "#e795aa", #
                   "#c60032"), #
           bty = 'n')#
dev.off()
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  library(grid)#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
  numPlots = length(plots)#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                     ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
  if (numPlots==1) {#
    print(plots[[1]])#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
