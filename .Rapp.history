?glmmPQL
FD2 <- paste(WD,"FITS2/",sep="")
require(e1071)
?svm
library(sppairs)#
# then import a site by species matrix for example purposes#
library(cooccur)#
data(beetles)#
# remove rare species (<10% sites)#
dataset <-clean.dataset(beetles, cutoff.min=0.1)
or.symmetric(dataset[, 1:2]) # Symmetric odds ratio = 28.89#
or.asymmetric(dataset[, 1:2]) # Asymmetric odds ratio = 11.45#
mutual.information(dataset[, 1:2]) # MI = 0.235#
cor(dataset[, 1], dataset[, 2]) # Pearson's correlation (from base R) = 0.62
# default is to calculate the symmetric odds ratio#
result <-spaa(dataset)
# create grouping variable for example purposes ONLY#
groups <-as.factor(rep(c(1:10), length.out=dim(beetles)[1])) #
# alternatively, return some raw coefficients from mixed models, rather than odds ratios#
result <-spaa(dataset, method='glmer.coef', random.effect=groups, asymmetric=TRUE)
result <-spaa(dataset, method='glmer.coef', random.effect=groups, asymmetric=TRUE)[, 1:3]
plot.spaa(result)
graph.data <- graph_from_data_frame(result)
plot(graph.data) # see ?igraph.plotting for more options
result
graph.data
?graph_from_data_frame
str(nmds_m)
for (e in 2:length(ENS)) {#
	for (p in 1:length(PRV)) {#
		opts<-list(modelEnsemble=ENS[[e]],prevaleceThreshold=PRV[[p]])		#
		for (sz in 1:2) {#
			# modify predictions to probs, sp richness, beta indices	#
			for (d in 1:length(Sets)) {#
				set_no <- Sets[d]#
				source(readdata)#
				source(paste(modpredsFolder,"sp_occ_probs.r",sep="/"))#
			}#
			for (d in 1:length(Sets)) {#
				set_no <- Sets[d]#
				source(readdata)#
				source(paste(modpredsFolder,"sp_rich_site.r",sep="/"))#
			}#
			for (d in 1:length(Sets)) {#
				set_no <- Sets[d]#
				source(readdata)#
				source(paste(modpredsFolder,"beta_inds.r",sep="/"))#
			}#
		}#
	}#
}
require(doParallel)
require(doMC)
?doParallel
filebody<-paste(RDfinal,dataN[sz],"/meta_analysis/PMS",sep="")
?axis
load("/Users/anorberg/OneDrive - University of Helsinki/bakeoff/pipeline/RESULTS2/birds/sp_occ_probs_150.RData")
ls()
str(sp_occ_probs)
50*15
0.7*0.3
sqrt(0.7*0.3)
30/75
5/12
require(gjam)
?gjam
.\Localadmin_anorberg
(1000/30)*9
}
library('MASS')
a <- 5
require(Hmsc)
Hmsc::Hmsc
?structure
structure(1:6, dim = 2:3)
?class
?Hmsc
Hmsc::Hmsc
Hmsc::Hmsc::Hmsc
Hmsc:::Hmsc
c <- structure(list("a"=1, "b"=2), class="myclass")
c
library(Hmsc)
?Hmsc
Hmsc::computeDataParameters
rLs
library("sdmCom")
?sdmCom
?get_os
get_os <- function() {#
  if (.Platform$OS.type == "windows") { #
    "win"#
  } else if (Sys.info()["sysname"] == "Darwin") {#
    "osx" #
  } else if (.Platform$OS.type == "unix") { #
    "unix"#
  } else {#
    stop("Unknown OS")#
  }#
}
get_os()
os <- get_os()
os
library("sdmCom")
?get_os
?sdmCom
library("sdmCom")
?sdmCom
?get_os
library("sdmCom")
?get_os
?sdmCom
#' Identify your operating system#
#'#
#' @return Your operating system, either OSX, Unix or Windows#
#' @examples#
#' os <- get_os()#
#' os#
#
get_os <- function() {#
  if (.Platform$OS.type == "windows") { #
    "win"#
  } else if (Sys.info()["sysname"] == "Darwin") {#
    "osx" #
  } else if (.Platform$OS.type == "unix") { #
    "unix"#
  } else {#
    stop("Unknown OS")#
  }#
}#
#
roxygen2::roxygenise()
?roxygenise
roxygenize(package.dir = "/Users/anorberg/OneDrive - University of Helsinki/bakeoff/r-package/sdmCom")
roxygen2::roxygenize(package.dir = "/Users/anorberg/OneDrive - University of Helsinki/bakeoff/r-package/sdmCom")
?sdmCom
library("sdmCom")
?sdmCom
os <- get_os()#
os
?sample
y <- matrix(sample(c(0,1), 100, replace = TRUE), ncol=5)
y
y_subset <- common_sp(y=y, prevalence_threshold = 0.5)
common_sp <- function(y, prevalence_threshold = 0.1) {#
    com_sp <- which((colSums(y)/nrow(y)) >= prevalence_threshold)#
    return(com_sp)#
#
}
y_subset <- common_sp(y=y, prevalence_threshold = 0.5)
y_subset
y <- matrix(sample(c(0,1), 100, replace = TRUE), ncol=5)
y_subset_inds <- common_sp(y=y, prevalence_threshold = 0.5)
y_subset <- y[,y_subset_inds]
y_subset
y_subset_inds
y <- matrix(sample(c(0,1), 100, replace = TRUE), ncol=5)
y_subset_inds <- common_sp(y=y, prevalence_threshold = 0.25)
y_subset <- y[,y_subset_inds]
y_subset
set.seed(7)
y <- matrix(sample(c(0,1), 100, replace = TRUE), ncol=5)
y_subset_inds <- common_sp(y=y, prevalence_threshold = 0.25)
y_subset <- y[,y_subset_inds]
y_subset
y_subset_inds <- common_sp(y=y, prevalence_threshold = 0.5)
y_subset <- y[,y_subset_inds]
y_subset
y_subset_inds
y_subset_inds <- common_sp(y=y, prevalence_threshold = 0.6)
y_subset <- y[,y_subset_inds]
y_subset
y_subset_inds
y_subset_inds <- common_sp(y=y, prevalence_threshold = 0.4)
y_subset <- y[,y_subset_inds]
y_subset
roxygen2::roxygenize(package.dir = "/Users/anorberg/OneDrive - University of Helsinki/bakeoff/r-package/sdmCom")
library("sdmCom")
?sdmCom
roxygen2::roxygenize(package.dir = "/Users/anorberg/OneDrive - University of Helsinki/bakeoff/r-package/pkg/sdmCom")
q()
library('caret')
?train
library(mlbench)#
data(BostonHousing)
library(mlbench)
install.packages("mlbench")
library(mlbench)#
data(BostonHousing)
lmFit <- train(medv ~ . + rm:lstat,#
               data = BostonHousing,#
               method = "lm")
library(rpart)
rpartFit <- train(medv ~ .,#
                  data = BostonHousing,#
                  method = "rpart",#
                  tuneLength = 9)
setwd(".")
getwd()
file.exists(".")
str(fits)
str(preds$predictions$bcs$bc1)
??caret
citation(caret)
library('SSDM')#
library('zoon')#
library('sdm')#
library('caret')
citation(caret)
library('caret')
citation(caret)
citation("caret"")
citation("caret")
citation('SSDM')
??cssdm
??SSDM
??sdm
??caret
??zoon
install.packages('biomod2')
citation('biomod2')
citation('sdm')
citation('zoon')
library('sdmCom')
??sdmCom
??caret
?train
names(getModelInfo())
trellis.par.set(caretTheme())
sdm::sdm
sdm:::sdm
showMethods("sdm")
??SSDM
??zoon
library('zoon')
?workflow
zoon::workflow
zoon:::workflow
GetModuleList()
?BayesComm
library(BayesComm)
?BayesComm
library(gbm)
?gbm
library(mgcv)
?mgcv
200/3
830/5
3*(830/5)
500/6
850/6
171+187
citation(mvpart)
citation("mvpart")
citation("dismo")
citation("boral")
citation()
install.packages(c("Hmsc"))
library(Hmsc)
m = Hmsc(Y=TD$Y, XData=TD$X, XFormula=~x1+x2)
rL = HmscRandomLevel(xData=data.frame(x1=rep(1,length(TD$X$x1)),x2=TD$X$x2))
rL
rL = HmscRandomLevel(xData=data.frame(x1=rep(1,length(TD$X$x1)),x2=TD$X$x2))#
#
studyDesign = data.frame(sample = as.factor(1:50), plot = as.factor(sample(1:20,50,replace=TRUE)))#
rL1 = HmscRandomLevel(units=TD$studyDesign$plot)#
rL2 = HmscRandomLevel(units=TD$studyDesign$sample)#
#
m = Hmsc(Y=TD$Y, XData=TD$X, XFormula=~x1+x2,studyDesign=studyDesign,ranLevels=list("sample"=rL,"plot"=rL2))
M
m
tmp <- sampleMcmc(m, samples=100)
library(devtools)
install_github("hmsc-r/HMSC", #
                 build_opts = c("--no-resave-data", #
                                "--no-manual"))
library(Hmsc)#
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
install.packages("Hmsc")
library(Hmsc)
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))#
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
library(devtools)
install_github("hmsc-r/HMSC", #
                build_opts = c("--no-resave-data", #
                               "--no-manual"))
library(Hmsc)
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))#
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
ps <- sampleMcmc(m, samples = 100, alignPost=FALSE)
m
sampling_settings <- list(totsamp = 100000, #
                          trans = 50000, #
                          thn = 10, #
                          nFolds = 5)
m
m$rL
m$rL$sample
str(m$rL$sample)
vars$samps
library("trap17")
dat <- trapdata#
str(dat)
80*4
# 1 DATA: importation (and processing)#
rm(list = ls(all = TRUE))#
gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17-pkg"#
setwd(working_dir)#
library("trap17")
dirs <- set_dirs(working_dir = working_dir)#
                 #raw_data = TRUE)
dat <- trapdata
foc_study <- "trap17_totsamp2e"#
foldname <- "trap17_totsamp2e+05"
evals <- readRDS(file = file.path(file.path(dirs$fits, foldname), "evals.rds"))
tjurs <- lapply(lapply(evals, '[[', 1), '[[', 3)#
cors <- lapply(lapply(evals, '[[', 2), colMeans, na.rm = TRUE)#
lapply(tjurs, mean)#
lapply(cors, mean)
orig_combs <- co_occ_combs(partition = dat$X_pooled[,c("Genotype","Population")],#
                           Y_arr = array(dat$Y_pooled, #
                                         dim = c(nrow(dat$Y_pooled), #
                                                 ncol(dat$Y_pooled), #
                                                 1),#
                                         dimnames = list(1:nrow(dat$Y_pooled),#
                                                         colnames(dat$Y_pooled),#
                                                         1)))
cv_preds <- load_objects_from_dir(path = dirs$fits, #
                                  study = foc_study,#
                                  obj_type = "cv_preds")#
names(cv_preds)#
pss <- load_objects_from_dir(path = dirs$fits, #
                             study = foc_study,#
                             obj_type = "ps")#
names(pss)
whichPs <- 3#
cv_preds_variant <- cv_preds[whichPs]
sp_new_nams <- c("Clo", "En", "Be", "Cap", "Cau") #(*)#
sp_ord <- c("Clo", "Be", "Cap", "Cau", "En") #(*)
modelled_combs <- readRDS(file = file.path(dirs$fits, foldname, "modelled_combs.rds"))
str(modelled_combs)
all_virus_combs <- as.character(unique(unlist(lapply(lapply(modelled_combs, #
                                                            dimnames), #
                                                            '[', #
                                                            1))))#
all_virus_combs <- all_virus_combs[order(sapply(all_virus_combs, nchar), #
                                         decreasing = TRUE)]#
all_virus_combs <- c("Empty", all_virus_combs[-which(all_virus_combs == "Empty")])
sp_ord <- c("Clo", "Be", "Cap", "Cau", "En")#
prev_ord_genot <- c(2, 4, 1, 3)#
prev_ord_pop <- c(2, 3, 1, 4)
all_virus_combs <- c(all_virus_combs[-c(length(all_virus_combs):(length(all_virus_combs)-4))], #
                     sp_ord[length(sp_ord):1])
colrs <- load_colour_palette()
colrs
#' Load colour palette#
#'#
#' Load a custom, colour-blind-friendly palette of colours for results plotting#
#' @export#
#
load_colour_palette <- function() {#
#
    res <- list()#
    res[[1]] <- c("grey75",#
                "#2f1855",#
                "#98c339",#
                "#6349bc",#
                "#3dc662",#
                "#5b006f",#
                "#02da89",#
                "#c759c8",#
                "#32901a",#
                "#e860c6",#
                "#9aa400",#
                "#0046a5",#
                "#ffc746",#
                "#43b3ff",#
                "#cf5f18",#
                "#02c0ad",#
                "#8e0059",#
                "#7fe9a5",#
                "#78005f",#
                "#bbe16f",#
                "#60002f",#
                "#74e8c5",#
                "#740011",#
                "#007f42",#
                "#ff68a5",#
                "#b4c87d",#
                "#6e0027",#
                "#ffbe58",#
                "#e6b4ff",#
                "#746600",#
                "#ff7081",#
                "#7f3d00")#
#
    res[[2]] <- c("grey75",#
                "#e79fff",#
                "#ffad6a",#
                "#b10b80",#
                "#f2d250",#
                "#d0b3ff",#
                "#9669a9",#
                "#015dcf",#
                "#98000a",#
                "#246a00",#
                "#ff71ba",#
                "#cb57c4",#
                "#c1232e",#
                "#d1dc70",#
                "#59007b",#
                "#ff6686",#
                "#770055",#
                "#fe8fff",#
                "#01a0f2",#
                "#5b50c4",#
                "#391255",#
                "#a99500",#
                "#f34890",#
                "#ff9276",#
                "#ffafe6",#
                "#d52a4c",#
                "#cc4525",#
                "#00b262",#
                "#0160a6",#
                "#002700",#
                "#ffab4b",#
                "#7c92d9")#
#
    res[[3]] <- cbind(c("Clo", "Be", "Cap", "Cau", "En"),#
                      c("#7c92d9", "#ffab4b", "#002700", "#0160a6", "#00b262"))#
#
    return(res)#
}
colrs <- load_colour_palette()
colmat <- cbind(all_virus_combs, colrs[[2]])
rownames(colmat) <- colmat[,1]#
colmat_legend <- colmat
par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
            tmp12 <- orig_combs[, g, p][rownames(colmat)]#
            tmp11 <- cbind(tmp11, tmp12)#
        }#
    if (any(is.na(tmp11))) { #
        tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
    }#
    colrs1 <- colmat[rownames(tmp11), 2]#
    colrs1 <- colrs1[nrow(tmp11):1]#
    barplot(tmp11[nrow(tmp11):1,],#
            col = colrs1,#
            xaxt = "n")#
    }
#' Load colour palette#
#'#
#' Load a custom, colour-blind-friendly palette of colours for results plotting#
#' @export#
#
load_colour_palette <- function() {#
#
    res <- list()#
    res[[1]] <- c("grey75",#
                "#2f1855",#
                "#98c339",#
                "#6349bc",#
                "#3dc662",#
                "#5b006f",#
                "#02da89",#
                "#c759c8",#
                "#32901a",#
                "#e860c6",#
                "#9aa400",#
                "#0046a5",#
                "#ffc746",#
                "#43b3ff",#
                "#cf5f18",#
                "#02c0ad",#
                "#8e0059",#
                "#7fe9a5",#
                "#78005f",#
                "#bbe16f",#
                "#60002f",#
                "#74e8c5",#
                "#740011",#
                "#007f42",#
                "#ff68a5",#
                "#b4c87d",#
                "#6e0027",#
                "#ffbe58",#
                "#e6b4ff",#
                "#746600",#
                "#ff7081",#
                "#7f3d00")#
#
    res[[2]] <- c("grey75",#
                "#e79fff",#
                "#ffad6a",#
                "#b10b80",#
                "#f2d250",#
                "#d0b3ff",#
                "#9669a9",#
                "#015dcf",#
                "#98000a",#
                "#246a00",#
                "#ff71ba",#
                "#cb57c4",#
                "#c1232e",#
                "#d1dc70",#
                "#59007b",#
                "#ff6686",#
                "#770055",#
                "#fe8fff",#
                "#01a0f2",#
                "#5b50c4",#
                "#391255",#
                "#a99500",#
                "#f34890",#
                "#ff9276",#
                "#ffafe6",#
                "#d52a4c",#
                "#cc4525",#
                "#00b262",#
                "#0160a6",#
                "#003b00",#
                "#ffab4b",#
                "#7c92d9")#
#
    res[[3]] <- cbind(c("Clo", "Be", "Cap", "Cau", "En"),#
                      c("#7c92d9", "#ffab4b", "#003b00", "#0160a6", "#00b262"))#
#
    return(res)#
}
colrs <- load_colour_palette()#
colmat <- cbind(all_virus_combs, colrs[[2]])#
rownames(colmat) <- colmat[,1]#
colmat_legend <- colmat
par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
            tmp12 <- orig_combs[, g, p][rownames(colmat)]#
            tmp11 <- cbind(tmp11, tmp12)#
        }#
    if (any(is.na(tmp11))) { #
        tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
    }#
    colrs1 <- colmat[rownames(tmp11), 2]#
    colrs1 <- colrs1[nrow(tmp11):1]#
    barplot(tmp11[nrow(tmp11):1,],#
            col = colrs1,#
            xaxt = "n")#
    }
i<-1
par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp12 <- NULL#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
                tmp12 <- modelled_combs[[i]][,g,p][rownames(colmat)]#
                tmp11 <- cbind(tmp11, tmp12)#
        }#
        if (any(is.na(tmp11))) { #
            tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
        }#
        colrs1 <- colmat[rownames(tmp11), 2]#
        colrs1 <- colrs1[nrow(tmp11):1]#
        barplot(tmp11[nrow(tmp11):1,],#
                col = colrs1,#
                xaxt = "n")#
                #legend.text = rownames(tmp11)[nrow(tmp11):1])#
    }
#' Load colour palette#
#'#
#' Load a custom, colour-blind-friendly palette of colours for results plotting#
#' @export#
#
load_colour_palette <- function() {#
#
    res <- list()#
    res[[1]] <- c("grey75",#
                "#2f1855",#
                "#98c339",#
                "#6349bc",#
                "#3dc662",#
                "#5b006f",#
                "#02da89",#
                "#c759c8",#
                "#32901a",#
                "#e860c6",#
                "#9aa400",#
                "#0046a5",#
                "#ffc746",#
                "#43b3ff",#
                "#cf5f18",#
                "#02c0ad",#
                "#8e0059",#
                "#7fe9a5",#
                "#78005f",#
                "#bbe16f",#
                "#60002f",#
                "#74e8c5",#
                "#740011",#
                "#007f42",#
                "#ff68a5",#
                "#b4c87d",#
                "#6e0027",#
                "#ffbe58",#
                "#e6b4ff",#
                "#746600",#
                "#ff7081",#
                "#7f3d00")#
#
    res[[2]] <- c("grey75",#
                "#e79fff",#
                "#ffad6a",#
                "#b10b80",#
                "#f2d250",#
                "#d0b3ff",#
                "#9669a9",#
                "#015dcf",#
                "#98000a",#
                "#246a00",#
                "#ffd500",#
                "#cb57c4",#
                "#c1232e",#
                "#d1dc70",#
                "#59007b",#
                "#ff6686",#
                "#770055",#
                "#fe8fff",#
                "#01a0f2",#
                "#5b50c4",#
                "#391255",#
                "#a99500",#
                "#f34890",#
                "#ff9276",#
                "#ffafe6",#
                "#d52a4c",#
                "#cc4525",#
                "#00b262",#
                "#0160a6",#
                "#003b00",#
                "#ffab4b",#
                "#7c92d9")#
#
    res[[3]] <- cbind(c("Clo", "Be", "Cap", "Cau", "En"),#
                      c("#7c92d9", "#ffab4b", "#003b00", "#0160a6", "#00b262"))#
#
    return(res)#
}
colrs <- load_colour_palette()#
colmat <- cbind(all_virus_combs, colrs[[2]])#
rownames(colmat) <- colmat[,1]#
colmat_legend <- colmat
par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp12 <- NULL#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
                tmp12 <- modelled_combs[[i]][,g,p][rownames(colmat)]#
                tmp11 <- cbind(tmp11, tmp12)#
        }#
        if (any(is.na(tmp11))) { #
            tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
        }#
        colrs1 <- colmat[rownames(tmp11), 2]#
        colrs1 <- colrs1[nrow(tmp11):1]#
        barplot(tmp11[nrow(tmp11):1,],#
                col = colrs1,#
                xaxt = "n")#
                #legend.text = rownames(tmp11)[nrow(tmp11):1])#
    }
pdf(file = file.path(dirs$raw_data_figs, #
                     "orig_cooccs.pdf"),#
    bg = "transparent", #
    width = 15, #
    height = 5)#
    par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
            tmp12 <- orig_combs[, g, p][rownames(colmat)]#
            tmp11 <- cbind(tmp11, tmp12)#
        }#
    if (any(is.na(tmp11))) { #
        tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
    }#
    colrs1 <- colmat[rownames(tmp11), 2]#
    colrs1 <- colrs1[nrow(tmp11):1]#
    barplot(tmp11[nrow(tmp11):1,],#
            col = colrs1,#
            xaxt = "n")#
    }#
dev.off()#
#
# 3.2.5 predicted co-occurrence combinations (Fig 4)#
for (i in 1:length(modelled_combs)) {#
    pdf(file = file.path(dirs$fits, #
                         foldname, #
                         "figs",#
                         paste0("co_occs_ps", #
                                whichPs[i],#
                                ".pdf")#
                        ),#
        bg = "transparent", #
        width = 15, #
        height = 5)#
    par(family = "serif", mfrow = c(1,4))#
    for (g in prev_ord_genot) {#
        tmp12 <- NULL#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
                tmp12 <- modelled_combs[[i]][,g,p][rownames(colmat)]#
                tmp11 <- cbind(tmp11, tmp12)#
        }#
        if (any(is.na(tmp11))) { #
            tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
        }#
        colrs1 <- colmat[rownames(tmp11), 2]#
        colrs1 <- colrs1[nrow(tmp11):1]#
        barplot(tmp11[nrow(tmp11):1,],#
                col = colrs1,#
                xaxt = "n")#
                #legend.text = rownames(tmp11)[nrow(tmp11):1])#
    }#
    dev.off()#
}
pdf(file = file.path(dirs$fits, #
                     foldname, #
                     "figs", #
                     "cooccurrencebars_legend.pdf"),#
    bg = "transparent", #
    width = 5, #
    height = 10)#
    par(family = "serif")#
    plot(x = 1:10, 1:10, type = 'n', xaxt = 'n', yaxt = 'n', xlab = "", ylab = "")#
    legend("topleft", legend = colmat_legend[,1], fill = colmat_legend[,2], bty = 'n')#
dev.off()
abundances_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    abundances_genot[[g]] <- colSums(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
}#
abundances_genot <- abundances_genot[prev_ord_genot]
abundances_pops <- list()#
for (p in 1:length(unique(dat$X_pooled[,"Population"]))) {#
    p1 <- sort(unique(dat$X_pooled[,"Population"]))[p]#
    abundances_pops[[p]] <- colSums(dat$Y_pooled[which(dat$X_pooled[,"Population"]  == p1), ])#
}#
abundances_pops <- abundances_pops[prev_ord_pop]#
#
colrs <- load_colour_palette()#
colrs_rwplt <- colrs[[3]]#
rownames(colrs_rwplt) <- colrs_rwplt[,1]
par(family = "serif")#
    barplot(simplify2array(abundances_pops),#
            col = colrs_rwplt[,2],#
            ylim = c(0, 200),#
            xaxt = "n",#
            yaxt = "n")#
    axis(2, at = c(0, 50, 100, 200), labels = c("0", "50", "100", "320"), tick = TRUE, las = 2)
par(family = "serif")#
    barplot(simplify2array(abundances_genot),#
            col = colrs_rwplt[,2],#
            ylim = c(0, 200),#
            xaxt = "n",#
            yaxt = "n")#
    axis(2, at = c(0, 50, 100, 200), labels = c("0", "50", "100", "320"), tick = TRUE, las = 2)
leg <- cbind(sp_ord, colrs_rwplt[,2])#
leg <- leg[nrow(leg):1, ]
par(family = "serif")#
    plot(x = 1:10, 1:10, type = 'n', xaxt = 'n', yaxt = 'n', xlab = "", ylab = "")#
    legend("topleft", legend = c("Empty", leg[, 1]), fill = c("grey75", leg[, 2]), bty = 'n')
pdf(file = file.path(dirs$raw_data_figs, #
                     "abundances_by_pop.pdf"),#
    bg = "transparent", #
    width = 4, #
    height = 5)#
    par(family = "serif")#
    barplot(simplify2array(abundances_pops),#
            col = colrs_rwplt[,2],#
            ylim = c(0, 200),#
            xaxt = "n",#
            yaxt = "n")#
    axis(2, at = c(0, 50, 100, 200), labels = c("0", "50", "100", "320"), tick = TRUE, las = 2)#
dev.off()#
#
pdf(file = file.path(dirs$raw_data_figs, #
                     "abundances_by_genot.pdf"),#
    bg = "transparent", #
    width = 4, #
    height = 5)#
    par(family = "serif")#
    barplot(simplify2array(abundances_genot),#
            col = colrs_rwplt[,2],#
            ylim = c(0, 200),#
            xaxt = "n",#
            yaxt = "n")#
    axis(2, at = c(0, 50, 100, 200), labels = c("0", "50", "100", "320"), tick = TRUE, las = 2)#
dev.off()#
#
leg <- cbind(sp_ord, colrs_rwplt[,2])#
leg <- leg[nrow(leg):1, ]#
pdf(file = file.path(dirs$raw_data_figs, #
                     "abundances_legend.pdf"),#
    bg = "transparent", #
    width = 3, #
    height = 5)#
    par(family = "serif")#
    plot(x = 1:10, 1:10, type = 'n', xaxt = 'n', yaxt = 'n', xlab = "", ylab = "")#
    legend("topleft", legend = c("Empty", leg[, 1]), fill = c("grey75", leg[, 2]), bty = 'n')#
dev.off()
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
#install_github("klutometis/roxygen")#
#
library("devtools")#
library("roxygen2")#
#
root_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17-pkg"#
pkg_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17-pkg/trap17"#
#
### create the package#
#setwd(root_dir)#
#create("trap17")#
### document the package#
setwd(pkg_dir)#
document()#
#
### install and load#
setwd(working_dir)#
install("trap17")
