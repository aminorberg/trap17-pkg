library(rpart)
rpartFit <- train(medv ~ .,#
                  data = BostonHousing,#
                  method = "rpart",#
                  tuneLength = 9)
setwd(".")
getwd()
file.exists(".")
str(fits)
str(preds$predictions$bcs$bc1)
??caret
citation(caret)
library('SSDM')#
library('zoon')#
library('sdm')#
library('caret')
citation(caret)
library('caret')
citation(caret)
citation("caret"")
citation("caret")
citation('SSDM')
??cssdm
??SSDM
??sdm
??caret
??zoon
install.packages('biomod2')
citation('biomod2')
citation('sdm')
citation('zoon')
library('sdmCom')
??sdmCom
??caret
?train
names(getModelInfo())
trellis.par.set(caretTheme())
sdm::sdm
sdm:::sdm
showMethods("sdm")
??SSDM
??zoon
library('zoon')
?workflow
zoon::workflow
zoon:::workflow
GetModuleList()
?BayesComm
library(BayesComm)
?BayesComm
library(gbm)
?gbm
library(mgcv)
?mgcv
200/3
830/5
3*(830/5)
500/6
850/6
171+187
citation(mvpart)
citation("mvpart")
citation("dismo")
citation("boral")
citation()
install.packages(c("Hmsc"))
library(Hmsc)
m = Hmsc(Y=TD$Y, XData=TD$X, XFormula=~x1+x2)
rL = HmscRandomLevel(xData=data.frame(x1=rep(1,length(TD$X$x1)),x2=TD$X$x2))
rL
rL = HmscRandomLevel(xData=data.frame(x1=rep(1,length(TD$X$x1)),x2=TD$X$x2))#
#
studyDesign = data.frame(sample = as.factor(1:50), plot = as.factor(sample(1:20,50,replace=TRUE)))#
rL1 = HmscRandomLevel(units=TD$studyDesign$plot)#
rL2 = HmscRandomLevel(units=TD$studyDesign$sample)#
#
m = Hmsc(Y=TD$Y, XData=TD$X, XFormula=~x1+x2,studyDesign=studyDesign,ranLevels=list("sample"=rL,"plot"=rL2))
M
m
tmp <- sampleMcmc(m, samples=100)
library(devtools)
install_github("hmsc-r/HMSC", #
                 build_opts = c("--no-resave-data", #
                                "--no-manual"))
library(Hmsc)#
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
install.packages("Hmsc")
library(Hmsc)
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))#
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
library(devtools)
install_github("hmsc-r/HMSC", #
                build_opts = c("--no-resave-data", #
                               "--no-manual"))
library(Hmsc)
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))#
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
ps <- sampleMcmc(m, samples = 100, alignPost=FALSE)
m
sampling_settings <- list(totsamp = 100000, #
                          trans = 50000, #
                          thn = 10, #
                          nFolds = 5)
m
m$rL
m$rL$sample
str(m$rL$sample)
vars$samps
library("trap17")
dat <- trapdata#
str(dat)
80*4
library(Hmsc)
?Hmsc
names(pss)
library(igraphdata)
data(yeast)
yes <- data(yeast)
yes
library(graph)
install.packages("graph")
library("devtools")#
library("roxygen2")
?create
quartz()
par(family = "serif", mar = c(9, 2, 5, 1))
rm(list = ls(all = TRUE))#
gc()
# define working directory#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17-pkg"#
setwd(working_dir)#
library("trap17")
dirs <- set_dirs(working_dir = working_dir)
dat <- trapdata#
str(dat)#
sum(rowSums(dat$Y_pooled) > 0) / nrow(dat$Y_pooled)#
sum(rowSums(dat$Y_pooled) > 1) / sum(rowSums(dat$Y_pooled) > 0)
foc_study <- "trap17_totsamp2e"#
foldname <- "trap17_totsamp2e+05"
evals <- readRDS(file = file.path(file.path(dirs$fits, foldname), "evals.rds"))
evals
pss <- load_objects_from_dir(path = dirs$fits, #
                             study = foc_study,#
                             obj_type = "ps")
preds_exp <- list()#
eval_exp <- list()
preds_exp <- list()#
eval_exp <- list()
for (i in 1:length(pss)) {#
    preds_exp[[i]] <- Hmsc::computePredictedValues(hM = pss[[i]], #
                                              alignPost = FALSE)#
    eval_exp[[i]] <- Hmsc::evaluateModelFit(hM = pss[[i]], predY = preds_exp)#
#
}
preds_exp <- list()#
eval_exp <- list()#
for (i in 1:length(pss)) {#
    preds_exp[[i]] <- Hmsc::computePredictedValues(hM = pss[[i]], #
                                              alignPost = FALSE)#
    eval_exp[[i]] <- Hmsc::evaluateModelFit(hM = pss[[i]], #
                                            predY = preds_exp[[i]])#
#
}
eval_exp
lapply(eval_exp, mean)
lapply(eval_exp, apply, mean)
lapply(eval_exp, lapply, mean)
unlist(lapply(eval_exp, lapply, mean))
simplify2array(lapply(eval_exp, lapply, mean))
eval_exp_means <- simplify2array(lapply(eval_exp, lapply, mean))
colnames(eval_exp_means) <- paste0("ps", 1:ncol(eval_exp_means))
eval_exp_means
eval_exp
simplify2array(eval_exp)
eval_exp_means <- lapply(eval_exp, lapply, simplify2array)
eval_exp_means
eval_exp_means <- lapply(eval_exp, simplify2array)
eval_exp_means
eval_exp_arr <- lapply(eval_exp, simplify2array)
eval_exp_means <- simplify2array(lapply(eval_exp, lapply, mean))
eval_exp_arr
names(eval_exp_arr) <- paste0("ps", 1:ncol(eval_exp_means))
eval_exp_arr <- lapply(eval_exp, simplify2array)#
names(eval_exp_arr) <- paste0("ps", 1:ncol(eval_exp_means))#
eval_exp_means <- simplify2array(lapply(eval_exp, lapply, mean))#
colnames(eval_exp_means) <- paste0("ps", 1:ncol(eval_exp_means))#
eval_exp_means
eval_exp_arr[[1]]
eval_exp_arr[[2]]
eval_exp_arr[[3]]
eval_exp_arr[[4]]
eval_exp_arr[[5]]
eval_exp_arr[[6]]
eval_exp_arr[[7]]
eval_exp_means
ncol(pss[[1]]$Y)
partition.sp <- 1:ncol(pss[[1]]$Y)
sampling <- sampling_settings(totsamp = 200000,#
                             trans = 100000,#
                             thn = 100,#
                             nchains = 2,#
                             nfolds = 10)
foldname <- create_name(study = "trap17",#
                        totsamp = sampling$totsamp,#
                        nfolds = sampling$nfolds, #
                        type = "fold")
sampling$nfolds
fit
fit <- 2
sampling
fit <- 2#
vars <- trap17:::set_vars(study = "trap17",#
                          fit = fit,#
                          sampling = sampling)
vars
cv_partition <- Hmsc:::createPartition(hM = pss[[2]], #
                                       nfolds = sampling$nfolds, #
                                       column = vars$partition)
cv_partition
(!is.null(vars$covDepXvars))
cv_preds <- Hmsc:::computePredictedValues(hM = ps, #
                                              partition = cv_partition, #
                                              expected = expected,#
                                              alignPost = TRUE)
?Hmsc:::computePredictedValues
cv_preds <- Hmsc:::computePredictedValues(hM = pss[[fit]], #
                                              partition = cv_partition, #
                                              partition.sp =  partition_sp,#
                                              expected = expected,#
                                              alignPost = TRUE)
eval_exp_means
pss
pss[[4]]
names(pss[[4]])
names(pss[[5]])
ps <- pss[[5]]
names(ps)
ps$XFormula
ps$rL
ps <- pss[[6]]
ps$rL
ps <- pss[[7]]
ps$rL
ps
ps <- pss[[5]]#
ps#
ps$rL
ps <- pss[[4]]#
ps#
ps$rL
ps <- pss[[6]]
ps#
ps$rL
ps <- pss[[7]]
ps <- pss[[7]]#
ps#
ps$rL
evals <- readRDS(file = file.path(file.path(dirs$fits, foldname), "evals.rds"))
evals
evals <- evals[c(4:5,7)]
tjurs <- lapply(lapply(evals, '[[', 1), '[[', 3)
cors <- lapply(lapply(evals, '[[', 2), colMeans, na.rm = TRUE)
lapply(tjurs, mean)
lapply(cors, mean)
names(evals)
names(evals) <- c("ps1","ps2","ps3")
file.path(dirs$fits, foldname, "evals.rds")
saveRDS(evals, #
        file = file.path(dirs$fits, foldname, "evals.rds"))
evals <- readRDS(file = file.path(file.path(dirs$fits, foldname), "evals.rds"))
tjurs <- lapply(lapply(evals, '[[', 1), '[[', 3)#
cors <- lapply(lapply(evals, '[[', 2), colMeans, na.rm = TRUE)#
lapply(tjurs, mean)#
lapply(cors, mean)
evals <- readRDS(file = file.path(file.path(dirs$fits, foldname), "evals.rds"))
evals
evals <- evals[c(5:4,7)]
names(evals) <- c("ps1","ps2","ps3")
saveRDS(evals, #
        file = file.path(dirs$fits, foldname, "evals.rds"))
evals <- readRDS(file = file.path(file.path(dirs$fits, foldname), "evals.rds"))#
tjurs <- lapply(lapply(evals, '[[', 1), '[[', 3)#
cors <- lapply(lapply(evals, '[[', 2), colMeans, na.rm = TRUE)#
lapply(tjurs, mean)#
lapply(cors, mean)
dirs$fits
foc_study
pss <- load_objects_from_dir(path = dirs$fits, #
                             study = foc_study,#
                             obj_type = "ps")
pss
pss <- pss[c(5:4,7)]
pss
names(pss)
names(pss) <- c("trap17_totsamp2e+05_ps_1.rds","trap17_totsamp2e+05_ps_2.rds","trap17_totsamp2e+05_ps_3.rds")
pss
loadRDS
dirs
i<-1
file.path(dirs$fits, foldname, "ps_", i, ".rds")
file.path(dirs$fits, foldname, paste0("ps_", i, ".rds"))
pss <- list()
for (i in 1:3) {#
    pss[[i]] <- loadRDS(file = file.path(dirs$fits, foldname, paste0("ps_", i, ".rds"))) #
}
readRDS
pss <- list()#
for (i in 1:3) {#
    pss[[i]] <- readRDS(file = file.path(dirs$fits, foldname, paste0("ps_", i, ".rds"))) #
}
pss
paste0("ps_", i, ".rds")
filenames <- paste0("ps_", i, ".rds")
pss <- list()#
for (i in 1:3) {#
    filenames <- paste0("ps_", i, ".rds")#
    pss[[i]] <- readRDS(file = file.path(dirs$fits, foldname, filenames))#
    names(pss)[i] <- filename #
}
# load model variants#
pss <- list()#
for (i in 1:3) {#
    filename <- paste0("ps_", i, ".rds")#
    pss[[i]] <- readRDS(file = file.path(dirs$fits, foldname, filename))#
    names(pss)[i] <- filename #
}
pss
eval_exp <- list()#
for (i in 1:length(pss)) {#
    preds_exp <- Hmsc::computePredictedValues(hM = pss[[i]], #
                                              alignPost = FALSE)#
    eval_exp[[i]] <- Hmsc::evaluateModelFit(hM = pss[[i]], #
                                            predY = preds_exp)#
}
eval_exp_arr <- lapply(eval_exp, simplify2array)#
names(eval_exp_arr) <- paste0("ps", 1:ncol(eval_exp_means))#
eval_exp_means <- simplify2array(lapply(eval_exp, lapply, mean))#
colnames(eval_exp_means) <- paste0("ps", 1:ncol(eval_exp_means))#
eval_exp_means
eval_exp_arr <- lapply(eval_exp, simplify2array)
ncol(eval_exp_means)
eval_exp_arr <- lapply(eval_exp, simplify2array)
eval_exp_arr
names(eval_exp_arr)
length(eval_exp_arr)
names(eval_exp_arr) <- paste0("ps", 1:length(eval_exp_arr))
names(eval_exp_arr)
eval_exp_arr <- lapply(eval_exp, simplify2array)
names(eval_exp_arr) <- paste0("ps", 1:length(eval_exp_arr))
eval_exp_means <- simplify2array(lapply(eval_exp, lapply, mean))
colnames(eval_exp_means) <- paste0("ps", 1:ncol(eval_exp_means))
eval_exp_means
expected
?computePredictedValues
partition_sp <- 1:ncol(pss[[1]]$Y)#
fit <- 3
vars <- trap17:::set_vars(study = "trap17",#
                          fit = fit,#
                          sampling = sampling)#
cv_partition <- Hmsc:::createPartition(hM = pss[[2]], #
                                       nfolds = sampling$nfolds, #
                                       column = vars$partition)
vars$partition
cv_partition <- Hmsc:::createPartition(hM = pss[[fit]], #
                                       nfolds = sampling$nfolds, #
                                       column = "Plant")
if (!is.null(vars$covDepXvars)) {#
    cv_preds <- trap17:::computePredictedValues_modified(hM = ps, #
                                                         partition = cv_partition,#
                                                         partition.sp =  partition_sp,#
                                                         alignPost = FALSE)#
} else {#
    cv_preds <- Hmsc:::computePredictedValues(hM = pss[[fit]], #
                                              partition = cv_partition, #
                                              partition.sp = partition_sp,#
                                              alignPost = TRUE)#
}
partition_sp
?computePredictedValues
partition_sp <- 1:ncol(pss[[1]]$Y)#
cv_partition <- Hmsc:::createPartition(hM = pss[[fit]], #
                                       nfolds = sampling$nfolds, #
                                       column = "Plant")
cond_cv_preds <- list()
cond_cv_preds
for (fit in 1:3) {#
    if (!is.null(vars$covDepXvars)) {#
        cond_cv_preds[[fit]] <- trap17:::computePredictedValues_modified(hM = pss[[fit]], #
                                                             partition = cv_partition,#
                                                             partition.sp =  partition_sp,#
                                                             alignPost = FALSE)#
    } else {#
        cond_cv_preds[[fit]] <- Hmsc:::computePredictedValues(hM = pss[[fit]], #
                                                  partition = cv_partition, #
                                                  partition.sp = partition_sp,#
                                                  alignPost = TRUE)#
    }#
}
