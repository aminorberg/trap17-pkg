par(family = "serif", mar = c(9, 2, 5, 1))
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17-pkg"#
setwd(working_dir)#
library("trap17")
dirs <- set_dirs(working_dir = working_dir)#
                 #raw_data = TRUE)
dat <- trapdata
sampling <- sampling_settings(totsamp = 5000,#
                             trans = 3000,#
                             thn = 10,#
                             nchains = 1,#
                             nfolds = 10)
foc_study <- "trap17_totsamp5000"#
foldname <- "trap17_totsamp5000"
sampling <- readRDS(file = file.path(dirs$fits, foldname, "sampling.rds"))
pss <- list()#
for (i in 1:3) {#
    filename <- paste0("ps_", i, ".rds")#
    pss[[i]] <- readRDS(file = file.path(dirs$fits, foldname, filename))#
    names(pss)[i] <- filename #
}
# 3.1.1 explanatory power#
eval_exp <- list()#
for (i in 1:length(pss)) {#
    preds_exp <- Hmsc::computePredictedValues(hM = pss[[i]], #
                                              alignPost = FALSE)#
    eval_exp[[i]] <- Hmsc::evaluateModelFit(hM = pss[[i]], #
                                            predY = preds_exp)#
}
eval_exp_arr <- lapply(eval_exp, simplify2array)
names(eval_exp_arr) <- paste0("ps", 1:length(eval_exp_arr))
eval_exp_means <- simplify2array(lapply(eval_exp, lapply, mean))#
colnames(eval_exp_means) <- paste0("ps", 1:ncol(eval_exp_means))#
eval_exp_means
evals <- readRDS(file = file.path(file.path(dirs$fits, foldname), "evals.rds"))
tjurs <- lapply(lapply(evals, '[[', 1), '[[', 3)#
cors <- lapply(lapply(evals, '[[', 2), colMeans, na.rm = TRUE)#
lapply(tjurs, mean)#
lapply(cors, mean)
dirs$raw_data_figs
orig_combs <- readRDS(file = file.path(dirs$raw_data_figs, "orig_combs.rds"))
orig_combs
whichPs <- 3#
cv_preds_variant <- readRDS(file = file.path(dirs$fits, foldname, #
                                             paste0("cv_preds_nfolds", #
                                                    sampling$nfolds, #
                                                    "_ps_", #
                                                    whichPs, #
                                                    ".rds")))
whichPs <- 2
cv_preds_variant <- readRDS(file = file.path(dirs$fits, foldname, #
                                             paste0("cv_preds_nfolds", #
                                                    sampling$nfolds, #
                                                    "_ps_", #
                                                    whichPs, #
                                                    ".rds")))
str(cv_preds_variant)
colnames(dat$Y_pooled)
dimnames(cv_preds_variant) <- list(1:dim(cv_preds_variant)[1],#
                                  colnames(dat$Y_pooled),#
                                  1:dim(cv_preds_variant)[3])
modelled_combs <- co_occ_combs(partition = dat$X_pooled[,c("Genotype",#
                                                           "Population")],#
                               Y_arr = cv_preds_variant)
file.path(dirs$fits, #
                        foldname, #
                        paste0("modelled_combs_ps_", whichPs, ".rds"))
saveRDS(modelled_combs, #
       file = file.path(dirs$fits, #
                        foldname, #
                        paste0("modelled_combs_ps_", whichPs, ".rds")))
all_virus_combs <- as.character(unique(dimnames(modelled_combs)[[1]]))#
all_virus_combs <- all_virus_combs[order(sapply(all_virus_combs, nchar), #
                                         decreasing = TRUE)]#
all_virus_combs <- c("Empty", all_virus_combs[-which(all_virus_combs == "Empty")])
prev_ord_genot <- c(2, 4, 1, 3)#
prev_ord_pop <- c(2, 3, 1, 4)
sp_ord[length(sp_ord):1]
colnames(ps$Y)
colnames(pss[[whichPs]]$Y)
virus_names <- colnames(pss[[whichPs]]$Y)
all_virus_combs <- c(all_virus_combs[-c(length(all_virus_combs):(length(all_virus_combs)-4))], #
                     virus_names[length(virus_names):1])
length(virus_names)
virus_names
virus_names[length(virus_names):1]
all_virus_combs[-c(length(all_virus_combs):(length(all_virus_combs)-4))]
all_virus_combs <- as.character(unique(dimnames(modelled_combs)[[1]]))#
all_virus_combs <- all_virus_combs[order(sapply(all_virus_combs, nchar), #
                                         decreasing = TRUE)]#
all_virus_combs <- c("Empty", all_virus_combs[-which(all_virus_combs == "Empty")])
all_virus_combs
modelled_combs
dimnames(modelled_combs)
as.character(unique(dimnames(modelled_combs)[[1]]))
str(cv_preds_variant)
partition = dat$X_pooled[,c("Genotype",#
                                                           "Population")]
Y_arr = cv_preds_variant
Xpartition <- as.data.frame(partition)#
    for (i in 1:ncol(Xpartition)) {#
        Xpartition[,i] <- paste0(colnames(Xpartition)[i], Xpartition[,i])    #
    }
Xpartition
calc_combs <- function (Y, Xpart) {        #
        combpaste <- function(y, sp_names) {#
             tmp1 <- paste(sp_names[as.logical(y)], #
                           collapse = "+")#
            return(tmp1)           #
        }#
        y_df <- as.data.frame(Y)           #
        tmp11 <- apply(y_df, MARGIN = 1, FUN = combpaste, sp_names = dimnames(y_df)[[2]])#
        Combinations <- matrix(tmp11, ncol = 1)#
#
        res_iter <- switch(ncol(Xpart), #
                           "1" = cbind(Combinations, Xpart[,1]), #
                           "2" = cbind(Combinations, Xpart[,1], Xpart[,2]), #
                           "3" = cbind(Combinations, Xpart[,1], Xpart[,2], Xpart[,3]),#
                           "4" = cbind(Combinations, Xpart[,1], Xpart[,2], Xpart[,4]),#
                           "5" = cbind(Combinations, Xpart[,1], Xpart[,2], Xpart[,3], Xpart[,4], Xpart[,5]))#
        return(res_iter)#
    }
res_iter
calc_combs <- function (Y, Xpart) {        #
        combpaste <- function(y, sp_names) {#
             tmp1 <- paste(sp_names[as.logical(y)], #
                           collapse = "+")#
            return(tmp1)           #
        }#
        y_df <- as.data.frame(Y)           #
        tmp11 <- apply(y_df, MARGIN = 1, FUN = combpaste, sp_names = dimnames(y_df)[[2]])#
        Combinations <- matrix(tmp11, ncol = 1)#
#
        res_iter <- switch(ncol(Xpart), #
                           "1" = cbind(Combinations, Xpart[,1]), #
                           "2" = cbind(Combinations, Xpart[,1], Xpart[,2]), #
                           "3" = cbind(Combinations, Xpart[,1], Xpart[,2], Xpart[,3]),#
                           "4" = cbind(Combinations, Xpart[,1], Xpart[,2], Xpart[,4]),#
                           "5" = cbind(Combinations, Xpart[,1], Xpart[,2], Xpart[,3], Xpart[,4], Xpart[,5]))#
        return(res_iter)#
    }
res_iter
tmp_res <- apply(Y_arr, MARGIN = 3, FUN = calc_combs, Xpart = Xpartition)
tmp_res
str(Y_arr)
is.list(Y_arr)
str(tmp_res)
str(Y_arr)
ytmp <- Y_arr[,,1]
Y<-ytmp
Xpart = Xpartition
combpaste <- function(y, sp_names) {#
             tmp1 <- paste(sp_names[as.logical(y)], #
                           collapse = "+")#
            return(tmp1)           #
        }
y_df <- as.data.frame(Y)
y_df
sp_ord
sp_new_nams
head(cv_preds_variant)
?computePredictedValues
Hmsc::computePredictedValues
Hmsc::predict
Hmsc:::predict
Hmsc:::predict.Hmsc
preds_exp
eval_exp[[i]] <- Hmsc::evaluateModelFit(hM = pss[[i]], #
                                            predY = preds_exp)
?computePredictedValues
eval_exp <- list()#
preds_realz <- list()#
for (i in 1:length(pss)) {#
    preds_exp <- Hmsc::computePredictedValues(hM = pss[[i]])#
    eval_exp[[i]] <- Hmsc::evaluateModelFit(hM = pss[[i]], #
                                            predY = preds_exp)#
    preds_realz[[i]] <- Hmsc::computePredictedValues(hM = pss[[i]])#
}
preds_exp
eval_exp[[i]]
preds_realz
preds_realz[[i]] <- Hmsc::computePredictedValues(hM = pss[[i]],#
                                                     expected = FALSE
)
preds_realz[[i]]
eval_exp <- list()#
preds_realz <- list()#
for (i in 1:length(pss)) {#
    preds_exp <- Hmsc::computePredictedValues(hM = pss[[i]])#
    eval_exp[[i]] <- Hmsc::evaluateModelFit(hM = pss[[i]], #
                                            predY = preds_exp)#
    preds_realz[[i]] <- Hmsc::computePredictedValues(hM = pss[[i]],#
                                                     expected = FALSE)#
}
eval_exp_arr <- lapply(eval_exp, simplify2array)
names(eval_exp_arr) <- paste0("ps", 1:length(eval_exp_arr))#
eval_exp_means <- simplify2array(lapply(eval_exp, lapply, mean))#
colnames(eval_exp_means) <- paste0("ps", 1:ncol(eval_exp_means))#
eval_exp_means
evals <- readRDS(file = file.path(file.path(dirs$fits, foldname), "evals.rds"))#
tjurs <- lapply(lapply(evals, '[[', 1), '[[', 3)#
cors <- lapply(lapply(evals, '[[', 2), colMeans, na.rm = TRUE)#
lapply(tjurs, mean)#
lapply(cors, mean)
eval_exp_means
str(cv_preds_variant)
str(preds_realz)
preds_realz_variant <- preds_realz[[whichPs]]
dimnames(preds_realz_variant) <- list(1:dim(preds_realz_variant)[1],#
                                  colnames(dat$Y_pooled),#
                                  1:dim(preds_realz_variant)[3])
modelled_combs <- co_occ_combs(partition = dat$X_pooled[,c("Genotype",#
                                                           "Population")],#
                               Y_arr = preds_realz_variant)
modelled_combs
saveRDS(modelled_combs, #
       file = file.path(dirs$fits, #
                        foldname, #
                        paste0("modelled_combs_ps_", whichPs, ".rds")))
dirs$fits
foldname
modelled_combs <- readRDS(file = file.path(dirs$fits, #
                          foldname, #
                          paste0("modelled_combs_ps_", whichPs, ".rds")))
all_virus_combs <- as.character(unique(dimnames(modelled_combs)[[1]]))
all_virus_combs <- all_virus_combs[order(sapply(all_virus_combs, nchar),
decreasing = TRUE)]
all_virus_combs <- c("Empty", all_virus_combs[-which(all_virus_combs == "Empty")])
all_virus_combs
virus_names <- colnames(pss[[whichPs]]$Y)#
prev_ord_genot <- c(2, 4, 1, 3)#
prev_ord_pop <- c(2, 3, 1, 4)
all_virus_combs <- c(all_virus_combs[-c(length(all_virus_combs):(length(all_virus_combs)-4))], #
                     virus_names[length(virus_names):1])
all_virus_combs
colrs <- load_colour_palette()#
colmat <- cbind(all_virus_combs, colrs[[2]])#
rownames(colmat) <- colmat[,1]#
colmat_legend <- colmat
for (g in prev_ord_genot) {#
        tmp11 <- c()#
        for (p in prev_ord_pop) {#
            tmp12 <- orig_combs[, g, p][rownames(colmat)]#
            tmp11 <- cbind(tmp11, tmp12)#
        }#
    if (any(is.na(tmp11))) { #
        tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
    }#
    colrs1 <- colmat[rownames(tmp11), 2]#
    colrs1 <- colrs1[nrow(tmp11):1]#
    barplot(tmp11[nrow(tmp11):1,],#
            col = colrs1,#
            xaxt = "n")#
    }
par(family = "serif", mfrow = c(1, 4))
for (g in prev_ord_genot) {#
    tmp12 <- NULL#
    tmp11 <- c()#
    for (p in prev_ord_pop) {#
            tmp12 <- modelled_combs[, g, p][rownames(colmat)]#
            tmp11 <- cbind(tmp11, tmp12)#
    }#
    if (any(is.na(tmp11))) { #
        tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
    }#
    colrs1 <- colmat[rownames(tmp11), 2]#
    colrs1 <- colrs1[nrow(tmp11):1]#
    barplot(tmp11[nrow(tmp11):1,],#
            col = colrs1,#
            xaxt = "n")#
            #legend.text = rownames(tmp11)[nrow(tmp11):1])#
}
file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     paste0("co_occs_ps_", #
                            whichPs,#
                            ".pdf")#
                    )
dirs$raw_data_figs
# 3.2.5 predicted co-occurrence combinations (Fig 4)#
pdf(file = file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     paste0("co_occs_ps_", #
                            whichPs,#
                            ".pdf")#
                    ),#
    bg = "transparent", #
    width = 15, #
    height = 5)#
par(family = "serif", mfrow = c(1, 4))#
for (g in prev_ord_genot) {#
    tmp12 <- NULL#
    tmp11 <- c()#
    for (p in prev_ord_pop) {#
            tmp12 <- modelled_combs[, g, p][rownames(colmat)]#
            tmp11 <- cbind(tmp11, tmp12)#
    }#
    if (any(is.na(tmp11))) { #
        tmp11 <- tmp11[-which(is.na(tmp11), arr.ind = TRUE)[,1],]#
    }#
    colrs1 <- colmat[rownames(tmp11), 2]#
    colrs1 <- colrs1[nrow(tmp11):1]#
    barplot(tmp11[nrow(tmp11):1,],#
            col = colrs1,#
            xaxt = "n")#
            #legend.text = rownames(tmp11)[nrow(tmp11):1])#
}#
dev.off()
whichPs <- 2#
ps <- pss[[whichPs]]#
#
library(wesanderson)#
wesandcols <- wes_palette("Cavalcanti1")[5:1]
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
selnames <- c("Intercept", #
              "Plant.area", #
              "Population", #
              "Genotype", #
              "Herbivory")
if (whichPs == 1) {#
    selnames <- selnames[-which(selnames == "Genotype")]#
    sel <- c(1, 2, rep(3, 3), 4)#
}
head(ps$X)
colnames(ps$X)
selnames
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
selnames <- c("Intercept", #
              "Plant.area", #
              "Population", #
              "Genotype", #
              "Herbivory")#
if (whichPs == 1) {#
    selnames <- selnames[-which(selnames == "Genotype")]#
    sel <- c(1, 2, rep(3, 3), 4)#
}
vp <- Hmsc::computeVariancePartitioning(ps, #
                                  group = sel, #
                                  groupnames = selnames)
toPlot <- vp$vals[-1,]#
toPlot <- toPlot[nrow(toPlot):1,]#
toPlot <- toPlot[, colnames(ps$Y)[order(colSums(ps$Y), decreasing = TRUE)]]
cov_order <- switch(as.character(whichPs), #
                    "1" = c("Population", #
                            "Plant.area", #
                            "Herbivory", #
                            "Random: Plant"), #
                    "2" = c("Genotype", #
                            "Population", #
                            "Plant.area", #
                            "Herbivory", #
                            "Random: Plant"), #
                    "3" = c("Genotype", #
                            "Population", #
                            "Plant.area", #
                            "Herbivory", #
                            "Random: Plant"))
toPlot
toPlot <- toPlot[cov_order, ]
round(rowMeans(toPlot*100), 2)
wesandcols_sel <- wesandcols[1:nrow(toPlot)]
file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     paste0("varpart_", #
                            whichPs,#
                            ".pdf")#
                    )
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = wesandcols_sel,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = wesandcols_sel[length(wesandcols_sel):1])
wesandcols <- c(wes_palette("Cavalcanti1")[5:2], "grey50")
wesandcols_vp <- c(wes_palette("Cavalcanti1")[5:2], "grey50")
wesandcols_vp <- c(wesandcols[2:5], "grey50")
wesandcols_vp
wesandcols <- wes_palette("Cavalcanti1")[5:1]#
wesandcols_vp <- c(wesandcols[2:5], "grey50")
wesandcols_vp
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = wesandcols_sel,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = wesandcols_sel[length(wesandcols_sel):1])
wesandcols_sel <- wesandcols_vp[1:nrow(toPlot)]
barplot(toPlot, #
            col = wesandcols_sel,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = wesandcols_sel[length(wesandcols_sel):1])
wesandcols_vp <- c("grey50", wesandcols)
wesandcols_vp <- c("grey50", wesandcols)
wesandcols_sel <- wesandcols_vp[1:nrow(toPlot)]
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = wesandcols_sel,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = wesandcols_sel[length(wesandcols_sel):1])
wesandcols_vp <- c(wesandcols,"grey50")
wesandcols_vp <- c(wesandcols, "grey50")
wesandcols <- wes_palette("Cavalcanti1")[4:1]#
wesandcols_vp <- c(wesandcols, "grey50")
wesandcols_sel <- wesandcols_vp[1:nrow(toPlot)]
barplot(toPlot, #
            col = wesandcols_sel,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = wesandcols_sel[length(wesandcols_sel):1])
wesandcols <- wes_palette("Cavalcanti1")[5:2]
wesandcols_vp <- c(wesandcols, "grey50")
wesandcols_vp
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = wesandcols_vp,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = wesandcols_sel[length(wesandcols_sel):1])
barplot(toPlot, #
            col = wesandcols_vp,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = wesandcols_vp[length(wesandcols_vp):1])
wes_palette("Cavalcanti1")
wesandcols <- wes_palette("Cavalcanti1")[c(1, 5, 2, 4)]
wesandcols_vp <- c(wesandcols, "grey50")
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = wesandcols_vp,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = wesandcols_vp[length(wesandcols_vp):1])
?computeVariancePartitioning
vp
pdf(file = file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     paste0("varpart_", #
                            whichPs,#
                            ".pdf")#
                    ),#
    bg = "white", #
    width = 7, #
    height = 5)#
    par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = wesandcols_vp,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = wesandcols_vp[length(wesandcols_vp):1])#
dev.off()
library(circleplot)#
#
if (whichPs == 3) {#
    omgcors <- trap17:::computeAssociations_modified(ps)#
    lev <- 1#
    supportLevel <- 0#
    toPlot <- ((omgcors[[lev]]$support > supportLevel)#
              + (omgcors[[lev]]$support < (1-supportLevel)) > 0) * omgcors[[lev]]$mean#
    toPlotDist <- list()#
    for (i in 1:dim(toPlot)[3]) {#
        toPlotDist[[i]] <- as.dist(toPlot[,,i])#
        toPlotDist[[i]][which(toPlotDist[[i]] == 0)] <- NA#
    }#
} else {#
    OmegaCor <- Hmsc:::computeAssociations(ps)#
    lev <- 1#
    supportLevel <- 0#
    toPlot <- ((OmegaCor[[lev]]$support > supportLevel)#
              + (OmegaCor[[lev]]$support < (1-supportLevel)) > 0) * OmegaCor[[lev]]$mean#
    toPlotDist <- as.dist(toPlot)#
    toPlotDist[which(toPlotDist == 0)] <- NA#
}
toPlotDist
OmegaCor[[lev]]$support
if (whichPs == 3) {#
    pdf(file = file.path(dirs$fits,#
                         foldname,#
                         "figs", #
                         paste0("omega_",#
                         ps$rLNames[lev],#
                         "_suppLev",#
                         supportLevel * 100,#
                         "_ps", #
                         whichPs,#
                         ".pdf")),#
        bg = "transparent", #
        width = 13, #
        height = 3)#
        par(family = "serif", mfrow = c(1, length(toPlotDist)))#
            for (i in 1:length(toPlotDist)) {#
                circleplot(toPlotDist[prev_ord_genot][[i]], #
                           cluster = FALSE,#
                           style = "classic",#
                           plot.control = list(point.labels = TRUE,#
                                               cex.point = 5,#
                                               line.breaks = c(-1,0,1),#
                                               line.cols = c("#00468b", "#c60032"),#
                                               line.widths = 5))#
            }#
    dev.off()#
} else {#
    pdf(file = file.path(dirs$fits,#
                         foldname,#
                         "figs", #
                         paste0("omega_",#
                         ps$rLNames[lev],#
                         "_suppLev",#
                         supportLevel * 100,#
                         "_ps", #
                         whichPs,#
                         ".pdf")),#
        bg = "transparent", #
        width = 3, #
        height = 3)#
        par(family = "serif")#
        circleplot(toPlotDist, #
                   cluster = FALSE,#
                   style = "classic",#
                   plot.control = list(point.labels = TRUE,#
                                       cex.point = 5,#
                                       line.breaks = c(-1,0,1),#
                                       line.cols = c("#00468b", "#c60032"),#
                                       line.widths = 5))#
    dev.off()#
}
betaPost_ps <- Hmsc:::getPostEstimate(ps, "Beta", q = c(0.05, 0.95))#
betaMeans_ps <- betaPost_ps$mean#
rownames(betaMeans_ps) <- colnames(ps$X)#
supportLevel <- 0.95#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)
betaSig
betaPost_ps <- Hmsc:::getPostEstimate(ps, "Beta", q = c(0.05, 0.95))#
betaMeans_ps <- betaPost_ps$mean#
rownames(betaMeans_ps) <- colnames(ps$X)#
supportLevel <- 0.9#
betaSig <- ((betaPost_ps$support > supportLevel)#
            + (betaPost_ps$support < (1-supportLevel)) > 0)#
betaSig <- betaSig * 1            #
rownames(betaSig) <- colnames(ps$X)
betas <- round(betaMeans_ps * betaSig, 2)
betas
betaMeans_ps
?Hmsc
Hmsc:::evaluateModelFit
?auc
citation(pROC)
library(pROC)
citation(pROC)
citation("pROC")
whichPs<-2
whichPs<-3
whichPs <- 3
ps <- pss[[whichPs]]
library(circleplot)
omgcors <- trap17:::computeAssociations_modified(ps)#
    lev <- 1#
    supportLevel <- 0#
    toPlot <- ((omgcors[[lev]]$support > supportLevel)#
              + (omgcors[[lev]]$support < (1-supportLevel)) > 0) * omgcors[[lev]]$mean#
    toPlotDist <- list()#
    for (i in 1:dim(toPlot)[3]) {#
        toPlotDist[[i]] <- as.dist(toPlot[,,i])#
        toPlotDist[[i]][which(toPlotDist[[i]] == 0)] <- NA#
    }
toPlotDist
omgcors[[lev]]$support
citation("Hmsc")
library(cooccur)
cooc_test_genot <- list()#
for (g in 1:length(unique(dat$X_pooled[,"Genotype"]))) {#
    g1 <- sort(unique(dat$X_pooled[,"Genotype"]))[g]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Genotype"]  == g1), ])#
    tryCatch(#
        expr = {#
            cooc_test_genot[[g]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
}
cooc_test_pop <- list()#
for (p in 1:length(unique(dat$X_pooled[,"Population"]))) {#
    p1 <- sort(unique(dat$X_pooled[,"Population"]))[p]#
    com <- t(dat$Y_pooled[which(dat$X_pooled[,"Population"]  == p1), ])#
    tryCatch(#
        expr = {#
            cooc_test_pop[[p]] <- cooccur(mat = com,#
                                            type = "spp_site",#
                                            spp_names = TRUE,#
                                            thresh = TRUE)#
        },#
        error = function(e) { print(e) },#
        warning = function(w) { print(w) }#
    )#
}#
cooc_test_pop[[3]]$results # population 433
cooc_test_genot[[2]]$results # genotype 609_19
cooc_test_genot[[3]]$results # genotype 2818_6
cooc_test <- cooccur(mat = t(dat$Y_pooled),#
                     type = "spp_site",#
                     spp_names = TRUE,#
                     thresh = TRUE)
cooc_test$results
foldname
whichPs <- 2#
ps <- pss[[whichPs]]
library(wesanderson)#
wesandcols <- wes_palette("Cavalcanti1")[c(1, 5, 2, 4)]#
wesandcols_vp <- c(wesandcols, "grey50")
wesandcols_vp
vp_cols <- c("#ffa500", "#3d9e3d", "#ff7b00", "#ffcf76", "#ff4d4d")
whichPs
# 3.3.1 variance partitioning#
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
selnames <- c("Intercept", #
              "Plant.area", #
              "Population", #
              "Genotype", #
              "Herbivory")#
if (whichPs == 1) {#
    selnames <- selnames[-which(selnames == "Genotype")]#
    sel <- c(1, 2, rep(3, 3), 4)#
}#
#
vp <- Hmsc::computeVariancePartitioning(ps, #
                                  group = sel, #
                                  groupnames = selnames)
toPlot <- vp$vals[-1,]#
toPlot <- toPlot[nrow(toPlot):1,]#
toPlot <- toPlot[, colnames(ps$Y)[order(colSums(ps$Y), decreasing = TRUE)]]#
cov_order <- switch(as.character(whichPs), #
                    "1" = c("Population", #
                            "Plant.area", #
                            "Herbivory", #
                            "Random: Plant"), #
                    "2" = c("Genotype", #
                            "Population", #
                            "Plant.area", #
                            "Herbivory", #
                            "Random: Plant"), #
                    "3" = c("Genotype", #
                            "Population", #
                            "Plant.area", #
                            "Herbivory", #
                            "Random: Plant"))
toPlot <- toPlot[cov_order, ]#
round(rowMeans(toPlot*100), 2)
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[length(vp_cols):1])
vp_cols <- c("#ffa500", "#004d00", "#ff7b00", "#ffcf76", "#ff4d4d")
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[length(vp_cols):1])
cov_order <- switch(as.character(whichPs), #
                    "1" = c("Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "2" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "3" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"))#
toPlot <- toPlot[cov_order, ]#
round(rowMeans(toPlot*100), 2)
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[length(vp_cols):1])
cbind(vp_cols, c("Plant.area", "Population", "Genotype",  "Herbivory", "Random: Plant"))
vp_cols <- cbind(vp_cols, c("Plant.area", "Population", "Genotype",  "Herbivory", "Random: Plant"))
rownames(vp_cols) <- vp_cols[,1]
cov_order
vp_cols[cov_order,]
cov_order
vp_cols
rownames(vp_cols) <- vp_cols[,2]
vp_cols[cov_order,]
vp_cols <- vp_cols[cov_order,]
vp_cols
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols,#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[length(vp_cols):1])
vp_cols
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols[,1],#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[nrow(vp_cols):1],1)
rm(list = ls(all = TRUE))#
gc()
# define working directory#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17-pkg"#
setwd(working_dir)#
library("trap17")
dirs <- set_dirs(working_dir = working_dir)
dat <- trapdata
foc_study <- "trap17_totsamp2e"#
foldname <- "trap17_totsamp2e+05"
sampling <- readRDS(file = file.path(dirs$fits, foldname, "sampling.rds"))
pss <- list()#
for (i in 1:2) {#
    filename <- paste0("ps_", i, ".rds")#
    pss[[i]] <- readRDS(file = file.path(dirs$fits, foldname, filename))#
    names(pss)[i] <- filename #
}
pss <- list()#
for (i in 1:3) {#
    filename <- paste0("ps_", i, ".rds")#
    pss[[i]] <- readRDS(file = file.path(dirs$fits, foldname, filename))#
    names(pss)[i] <- filename #
}
eval_exp <- list()#
preds_realz <- list()#
for (i in 1:length(pss)) {#
    preds_exp <- Hmsc::computePredictedValues(hM = pss[[i]])#
    eval_exp[[i]] <- Hmsc::evaluateModelFit(hM = pss[[i]], #
                                            predY = preds_exp)#
    preds_realz[[i]] <- Hmsc::computePredictedValues(hM = pss[[i]],#
                                                     expected = FALSE)#
}
eval_exp_arr <- lapply(eval_exp, simplify2array)#
names(eval_exp_arr) <- paste0("ps", 1:length(eval_exp_arr))#
eval_exp_means <- simplify2array(lapply(eval_exp, lapply, mean))#
colnames(eval_exp_means) <- paste0("ps", 1:ncol(eval_exp_means))#
eval_exp_means
whichPs <- 2#
ps <- pss[[whichPs]]
vp_cols <- c("#ffa500", "#004d00", "#ff7b00", "#ffcf76", "#ff4d4d")#
vp_cols <- cbind(vp_cols, c("Plant.area", "Population", "Genotype",  "Herbivory", "Random: Plant"))#
rownames(vp_cols) <- vp_cols[, 2]
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
selnames <- c("Intercept", #
              "Plant.area", #
              "Population", #
              "Genotype", #
              "Herbivory")#
if (whichPs == 1) {#
    selnames <- selnames[-which(selnames == "Genotype")]#
    sel <- c(1, 2, rep(3, 3), 4)#
}#
#
vp <- Hmsc::computeVariancePartitioning(ps, #
                                  group = sel, #
                                  groupnames = selnames)
toPlot <- vp$vals[-1,]#
toPlot <- toPlot[nrow(toPlot):1,]#
toPlot <- toPlot[, colnames(ps$Y)[order(colSums(ps$Y), decreasing = TRUE)]]#
cov_order <- switch(as.character(whichPs), #
                    "1" = c("Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "2" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "3" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"))#
toPlot <- toPlot[cov_order, ]#
round(rowMeans(toPlot*100), 2)#
vp_cols <- vp_cols[cov_order,]
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols[,1],#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[nrow(vp_cols):1],1)
file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     paste0("varpart_", #
                            whichPs,#
                            ".pdf")#
                    )
pdf(file = file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     paste0("varpart_", #
                            whichPs,#
                            ".pdf")#
                    ),#
    bg = "white", #
    width = 7, #
    height = 5)#
    par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols[,1],#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[nrow(vp_cols):1],1)#
dev.off()
vp_cols <- c("#ffa500", "#004d00", "#ff7b00", "#ffcf76", "#b10000")#
vp_cols <- cbind(vp_cols, c("Plant.area", "Population", "Genotype",  "Herbivory", "Random: Plant"))#
rownames(vp_cols) <- vp_cols[, 2]
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
selnames <- c("Intercept", #
              "Plant.area", #
              "Population", #
              "Genotype", #
              "Herbivory")#
if (whichPs == 1) {#
    selnames <- selnames[-which(selnames == "Genotype")]#
    sel <- c(1, 2, rep(3, 3), 4)#
}#
#
vp <- Hmsc::computeVariancePartitioning(ps, #
                                  group = sel, #
                                  groupnames = selnames)#
#
toPlot <- vp$vals[-1,]#
toPlot <- toPlot[nrow(toPlot):1,]#
toPlot <- toPlot[, colnames(ps$Y)[order(colSums(ps$Y), decreasing = TRUE)]]#
cov_order <- switch(as.character(whichPs), #
                    "1" = c("Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "2" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "3" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"))#
toPlot <- toPlot[cov_order, ]#
round(rowMeans(toPlot*100), 2)#
vp_cols <- vp_cols[cov_order,]#
#
pdf(file = file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     paste0("varpart_", #
                            whichPs,#
                            ".pdf")#
                    ),#
    bg = "white", #
    width = 7, #
    height = 5)#
    par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols[,1],#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[nrow(vp_cols):1],1)#
dev.off()
vp_cols <- c("#ffa500", "#004d00", "#ffbf00", "#ffcf76", "#b10000")#
vp_cols <- cbind(vp_cols, c("Plant.area", "Population", "Genotype",  "Herbivory", "Random: Plant"))#
rownames(vp_cols) <- vp_cols[, 2]#
#
#b10000 nice red -> host plant level latent variable#
#004d00 green -> local environmental context#
#ffbf00 dark yellow -> host genotype#
#ffa500 orange -> host plant size#
#ffcf76 light orange -> signs of herbivory#
# 3.3.1 variance partitioning#
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
selnames <- c("Intercept", #
              "Plant.area", #
              "Population", #
              "Genotype", #
              "Herbivory")#
if (whichPs == 1) {#
    selnames <- selnames[-which(selnames == "Genotype")]#
    sel <- c(1, 2, rep(3, 3), 4)#
}#
#
vp <- Hmsc::computeVariancePartitioning(ps, #
                                  group = sel, #
                                  groupnames = selnames)#
#
toPlot <- vp$vals[-1,]#
toPlot <- toPlot[nrow(toPlot):1,]#
toPlot <- toPlot[, colnames(ps$Y)[order(colSums(ps$Y), decreasing = TRUE)]]#
cov_order <- switch(as.character(whichPs), #
                    "1" = c("Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "2" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "3" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"))#
toPlot <- toPlot[cov_order, ]#
round(rowMeans(toPlot*100), 2)#
vp_cols <- vp_cols[cov_order,]
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols[,1],#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[nrow(vp_cols):1],1)
vp_cols <- c("#ffa500", "#004d00", "#ffbf00", "#ffe59a", "#b10000")#
vp_cols <- cbind(vp_cols, c("Plant.area", "Population", "Genotype",  "Herbivory", "Random: Plant"))#
rownames(vp_cols) <- vp_cols[, 2]#
#
#b10000 nice red -> host plant level latent variable#
#004d00 green -> local environmental context#
#ffbf00 dark yellow -> host genotype#
#ffa500 orange -> host plant size#
#ffe59a light orange -> signs of herbivory#
# 3.3.1 variance partitioning#
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
selnames <- c("Intercept", #
              "Plant.area", #
              "Population", #
              "Genotype", #
              "Herbivory")#
if (whichPs == 1) {#
    selnames <- selnames[-which(selnames == "Genotype")]#
    sel <- c(1, 2, rep(3, 3), 4)#
}#
#
vp <- Hmsc::computeVariancePartitioning(ps, #
                                  group = sel, #
                                  groupnames = selnames)#
#
toPlot <- vp$vals[-1,]#
toPlot <- toPlot[nrow(toPlot):1,]#
toPlot <- toPlot[, colnames(ps$Y)[order(colSums(ps$Y), decreasing = TRUE)]]#
cov_order <- switch(as.character(whichPs), #
                    "1" = c("Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "2" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "3" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"))#
toPlot <- toPlot[cov_order, ]#
round(rowMeans(toPlot*100), 2)#
vp_cols <- vp_cols[cov_order,]
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols[,1],#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[nrow(vp_cols):1],1)
#library(wesanderson)#
#wesandcols <- wes_palette("Cavalcanti1")[c(1, 5, 2, 4)]#
#wesandcols_vp <- c(wesandcols, "grey50")#
vp_cols <- c("#cc9900", "#004d00", "#ffbf00", "#ffe59a", "#b10000")#
vp_cols <- cbind(vp_cols, c("Plant.area", "Population", "Genotype",  "Herbivory", "Random: Plant"))#
rownames(vp_cols) <- vp_cols[, 2]#
#
#b10000 nice red -> host plant level latent variable#
#004d00 green -> local environmental context#
#ffbf00 dark yellow -> host genotype#
#cc9900 orange -> host plant size#
#ffe59a light orange -> signs of herbivory#
# 3.3.1 variance partitioning#
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
selnames <- c("Intercept", #
              "Plant.area", #
              "Population", #
              "Genotype", #
              "Herbivory")#
if (whichPs == 1) {#
    selnames <- selnames[-which(selnames == "Genotype")]#
    sel <- c(1, 2, rep(3, 3), 4)#
}#
#
vp <- Hmsc::computeVariancePartitioning(ps, #
                                  group = sel, #
                                  groupnames = selnames)#
#
toPlot <- vp$vals[-1,]#
toPlot <- toPlot[nrow(toPlot):1,]#
toPlot <- toPlot[, colnames(ps$Y)[order(colSums(ps$Y), decreasing = TRUE)]]#
cov_order <- switch(as.character(whichPs), #
                    "1" = c("Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "2" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "3" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"))#
toPlot <- toPlot[cov_order, ]#
round(rowMeans(toPlot*100), 2)#
vp_cols <- vp_cols[cov_order,]
par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols[,1],#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[nrow(vp_cols):1],1)
pdf(file = file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     paste0("varpart_", #
                            whichPs,#
                            ".pdf")#
                    ),#
    bg = "white", #
    width = 7, #
    height = 5)#
    par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols[,1],#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[nrow(vp_cols):1],1)#
dev.off()
round(rowMeans(toPlot*100), 2)
?computePredictedValues
#library(wesanderson)#
#wesandcols <- wes_palette("Cavalcanti1")[c(1, 5, 2, 4)]#
#wesandcols_vp <- c(wesandcols, "grey50")#
vp_cols <- c("#cc9900", "#004D40", "#ffbf00", "#ffe59a", "#D81B60")#
vp_cols <- cbind(vp_cols, c("Plant.area", "Population", "Genotype",  "Herbivory", "Random: Plant"))#
rownames(vp_cols) <- vp_cols[, 2]#
#
#D81B60 nice red -> host plant level latent variable#
#004D40 green -> local environmental context#
#ffbf00 dark yellow -> host genotype#
#cc9900 orange -> host plant size#
#ffe59a light orange -> signs of herbivory#
# 3.3.1 variance partitioning#
sel <-  c(1, 2, rep(3, 3), rep(4, 3), 5) #
selnames <- c("Intercept", #
              "Plant.area", #
              "Population", #
              "Genotype", #
              "Herbivory")#
if (whichPs == 1) {#
    selnames <- selnames[-which(selnames == "Genotype")]#
    sel <- c(1, 2, rep(3, 3), 4)#
}#
#
vp <- Hmsc::computeVariancePartitioning(ps, #
                                  group = sel, #
                                  groupnames = selnames)#
#
toPlot <- vp$vals[-1,]#
toPlot <- toPlot[nrow(toPlot):1,]#
toPlot <- toPlot[, colnames(ps$Y)[order(colSums(ps$Y), decreasing = TRUE)]]#
cov_order <- switch(as.character(whichPs), #
                    "1" = c("Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "2" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"), #
                    "3" = c("Genotype", #
                            "Plant.area", #
                            "Herbivory", #
                            "Population", #
                            "Random: Plant"))#
toPlot <- toPlot[cov_order, ]#
round(rowMeans(toPlot*100), 2)#
vp_cols <- vp_cols[cov_order,]#
#
pdf(file = file.path(dirs$fits, #
                     foldname, #
                     "figs",#
                     paste0("varpart_", #
                            whichPs,#
                            ".pdf")#
                    ),#
    bg = "white", #
    width = 7, #
    height = 5)#
    par(family = "serif", mar = c(8,3,2,10), xpd = TRUE)#
    barplot(toPlot, #
            col = vp_cols[,1],#
            xpd = TRUE,#
            las = 2)#
    legend(x = 6.25, y = 1, #
           legend = rownames(toPlot)[nrow(toPlot):1],#
           fill = vp_cols[nrow(vp_cols):1],1)#
dev.off()
file.path(dirs$fits, foldname, #
                                            paste0("cv_preds_nfolds", #
                                                   sampling$nfolds, #
                                                   "_ps_", #
                                                   whichPs, #
                                                   ".rds"))
cv_preds_variant <- readRDS(file = file.path(dirs$fits, foldname, #
                                            paste0("cv_preds_nfolds", #
                                                   sampling$nfolds, #
                                                   "_ps_", #
                                                   whichPs, #
                                                   ".rds")))
str(cv_preds_variant)
