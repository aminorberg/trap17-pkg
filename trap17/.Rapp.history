citation('zoon')
library('sdmCom')
??sdmCom
??caret
?train
names(getModelInfo())
trellis.par.set(caretTheme())
sdm::sdm
sdm:::sdm
showMethods("sdm")
??SSDM
??zoon
library('zoon')
?workflow
zoon::workflow
zoon:::workflow
GetModuleList()
?BayesComm
library(BayesComm)
?BayesComm
library(gbm)
?gbm
library(mgcv)
?mgcv
200/3
830/5
3*(830/5)
500/6
850/6
171+187
citation(mvpart)
citation("mvpart")
citation("dismo")
citation("boral")
citation()
install.packages(c("Hmsc"))
library(Hmsc)
m = Hmsc(Y=TD$Y, XData=TD$X, XFormula=~x1+x2)
rL = HmscRandomLevel(xData=data.frame(x1=rep(1,length(TD$X$x1)),x2=TD$X$x2))
rL
rL = HmscRandomLevel(xData=data.frame(x1=rep(1,length(TD$X$x1)),x2=TD$X$x2))#
#
studyDesign = data.frame(sample = as.factor(1:50), plot = as.factor(sample(1:20,50,replace=TRUE)))#
rL1 = HmscRandomLevel(units=TD$studyDesign$plot)#
rL2 = HmscRandomLevel(units=TD$studyDesign$sample)#
#
m = Hmsc(Y=TD$Y, XData=TD$X, XFormula=~x1+x2,studyDesign=studyDesign,ranLevels=list("sample"=rL,"plot"=rL2))
M
m
tmp <- sampleMcmc(m, samples=100)
library(devtools)
install_github("hmsc-r/HMSC", #
                 build_opts = c("--no-resave-data", #
                                "--no-manual"))
library(Hmsc)#
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
install.packages("Hmsc")
library(Hmsc)
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))#
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
library(devtools)
install_github("hmsc-r/HMSC", #
                build_opts = c("--no-resave-data", #
                               "--no-manual"))
library(Hmsc)
studyDesign <- data.frame(sample = as.factor(1:50),#
                          plot = as.factor(sample(1:20, 50, replace = TRUE)))#
rL2 <- HmscRandomLevel(units = TD$studyDesign$plot)#
xData = data.frame(x1=rep(1, length(TD$X$x1)), x2=as.numeric(TD$X$x2=="c"))#
rL1 <- HmscRandomLevel(xData = xData)#
m <- Hmsc(Y = TD$Y,XData = TD$X,#
          XFormula = ~x1+x2,#
          studyDesign = studyDesign,#
          ranLevels = list("sample" = rL1, "plot" = rL2))#
ps <- sampleMcmc(m, samples = 1000, alignPost=FALSE)
ps <- sampleMcmc(m, samples = 100, alignPost=FALSE)
m
sampling_settings <- list(totsamp = 100000, #
                          trans = 50000, #
                          thn = 10, #
                          nFolds = 5)
m
m$rL
m$rL$sample
str(m$rL$sample)
vars$samps
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
getwd()
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
getwd()
install("trap17")
library("trap17")
set_dirs(working_dir = ".")
library("trap17")
set_dirs(working_dir = ".")
trap17::set_dirs(working_dir = ".")
trap17:::set_dirs(working_dir = ".")
library("trap17")
trap17:::set_dirs(working_dir = ".")
set_dirs(working_dir = ".")
?create
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
getwd()
install("trap17")
library("trap17")
set_dirs(working_dir = ".")
?file.path
?Hmsc
?Hmsc:::Hmsc
?Hmsc:::Hmsc
Hmsc:::Hmsc
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")
document()#
setwd("..")
install("trap17")
library("trap17")
set_vars()
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17"
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")#
library("trap17")
rm(list = ls(all = TRUE)) #
gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17"
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17"
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17"#
setwd(working_dir)#
setwd("..")
install("trap17")
library("trap17")
setwd(working_dir)
dirs <- set_dirs(working_dir = working_dir)
dirs
?EcoSimR
data_prep <- function(filename = "TRAP17.csv",#
                      dirs = dirs) {#
#
    dat <- structure(list(dat = NULL, #
                          yvars_all = NULL, #
                          xvars_all = NULL,#
                          pivars_all = NULL,#
                          pool_sum_formula = NULL,#
                          pool_min_formula = NULL,#
                          pool_max_formula = NULL,#
                          grouping_var = NULL), #
                     class = "trapdata")#
#
    dat$dat <- read.csv2(file.path(dirs$dat, filename)) #check.names = FALSE#
    dat$dat <- data.frame(dat$dat)#
    names(dat$dat)[which(names(dat$dat) == "Clostero")] <- "Clo"#
    names(dat$dat)[which(names(dat$dat) == "Polero")] <- "En"#
    names(dat$dat)[which(names(dat$dat) == "Partiti")] <- "Be"#
    names(dat$dat)[which(names(dat$dat) == "PILV")] <- "Pl"#
    names(dat$dat)[which(names(dat$dat) == "CAMV")] <- "Ca"#
    dat$yvars_all <- c("Clo","En", "Be", "Pl", "Ca",#
                       "Virotic", "Curly", "Yellow")#
    dat$xvars_all <- c("Genotype", "Population", "Plant.area", "Herbivory")#
    dat$pivars_all <- c("sampleID", "Timepoint", "Plant")#
    dat$pool_sum_formula <- formula(cbind(Clo, #
                                          En, #
                                          Be, #
                                          Pl, #
                                          Ca, #
                                          Virotic, #
                                          Curly, #
                                          Yellow, #
                                          Herbivory, #
                                          Timepoint) ~ Plant)#
    dat$pool_min_formula <- formula(cbind(Genotype, Population) ~ Plant)#
    dat$pool_max_formula <- formula(Plant.area ~ Plant)#
    dat$grouping_var <- "Plant"#
    return(dat)#
#
}
dat <- data_prep(filename = "TRAP17.csv",#
                 dirs = dirs)
dirs$dat
data_prep <- function(filename = "TRAP17.csv",#
                      dirs = dirs) {#
#
    dat <- structure(list(dat = NULL, #
                          yvars = NULL, #
                          xvars = NULL,#
                          pivars = NULL,#
                          pool_sum_formula = NULL,#
                          pool_min_formula = NULL,#
                          pool_max_formula = NULL,#
                          grouping_var = NULL), #
                     class = "trapdata")#
#
    dat_tmp <- read.csv2(file.path(dirs$dat, filename)) #check.names = FALSE#
    dat_tmp <- data.frame(dat_tmp)#
    names(dat_tmp)[which(names(dat_tmp) == "Clostero")] <- "Clo"#
    names(dat_tmp)[which(names(dat_tmp) == "Polero")] <- "En"#
    names(dat_tmp)[which(names(dat_tmp) == "Partiti")] <- "Be"#
    names(dat_tmp)[which(names(dat_tmp) == "PILV")] <- "Pl"#
    names(dat_tmp)[which(names(dat_tmp) == "CAMV")] <- "Ca"#
    dat$yvars <- c("Clo","En", "Be", "Pl", "Ca")#
    dat$xvars <- c("Genotype", "Population", "Plant.area", "Herbivory")#
    dat$pivars <- c("sampleID", "Timepoint", "Plant")#
    dat$pool_sum_formula <- formula(cbind(Clo, #
                                          En, #
                                          Be, #
                                          Pl, #
                                          Ca, #
                                          Virotic, #
                                          Curly, #
                                          Yellow, #
                                          Herbivory, #
                                          Timepoint) ~ Plant)#
    dat$pool_min_formula <- formula(cbind(Genotype, Population) ~ Plant)#
    dat$pool_max_formula <- formula(Plant.area ~ Plant)#
    dat$grouping_var <- "Plant"#
#
    Ydat <- dat_tmp[, yvars]#
    Ydat <- apply(Ydat, 2, as.numeric)#
    if (!all(apply(Ydat, 2, is.numeric))) {#
        stop("Y is not numeric")#
    }#
#
    Xdat <- dat[, xvars]#
    Xdat <- apply(Xdat, 2, as.numeric)#
    Xdat <- data.frame(Xdat)#
    if (!all(apply(Xdat, 2, is.numeric))) {#
        stop("X is not numeric")#
    }#
    PIdat <- dat[, pivars]#
    if  ( any(unlist(strsplit(as.character(PIdat[1, "Plant"]), split = "")) == "S") ) {#
        PIdat[, "Plant"] <- sub(pattern = "S", #
                                replacement = "", #
                                x = PIdat[, "Plant"])#
    }#
    PIdat <- apply(PIdat, 2, as.numeric)#
    if (!all(apply(PIdat, 2, is.numeric))) {#
        stop("PI is not numeric")#
    }#
#
    if (save_all) {#
        saveRDS(Ydat, file = file.path(mod_dat_path, "Y.rds"))#
        saveRDS(Xdat, file = file.path(mod_dat_path, "X.rds"))#
        saveRDS(PIdat, file = file.path(mod_dat_path, "PI.rds"))#
    }#
#
    dat$Y <- Ydat#
    dat$X <- Xdat#
    dat$PI <- PIdat#
    return(dat)#
#
}
dat1 <- data_prep(filename = "TRAP17.csv",#
                  dirs = dirs)
working_dir
?dir
filename = "TRAP17.csv"
filename
(!file.exists(filename))
dirs
file.path(dirs$dat, filename)
#' Data preparation#
#'#
#' Prepare the original data: unify names and define aggregation formulas#
#' @param filename Original data file#
#' @param dirs A trap17 class "dirlist" object#
#' @export#
#
data_prep <- function(filename = "TRAP17.csv",#
                      dirs = dirs) {#
#
    dat <- structure(list(dat = NULL, #
                          yvars = NULL, #
                          xvars = NULL,#
                          pivars = NULL,#
                          pool_sum_formula = NULL,#
                          pool_min_formula = NULL,#
                          pool_max_formula = NULL,#
                          grouping_var = NULL), #
                     class = "trapdata")#
#
    datapath <- filename#
    if (!file.exists(datapath)) {#
        datapath <- file.path(dirs$dat, filename)#
    }#
    dat_tmp <- read.csv2(file.path(datapath)) #check.names = FALSE#
    dat_tmp <- data.frame(dat_tmp)#
    names(dat_tmp)[which(names(dat_tmp) == "Clostero")] <- "Clo"#
    names(dat_tmp)[which(names(dat_tmp) == "Polero")] <- "En"#
    names(dat_tmp)[which(names(dat_tmp) == "Partiti")] <- "Be"#
    names(dat_tmp)[which(names(dat_tmp) == "PILV")] <- "Pl"#
    names(dat_tmp)[which(names(dat_tmp) == "CAMV")] <- "Ca"#
    dat$yvars <- c("Clo","En", "Be", "Pl", "Ca")#
    dat$xvars <- c("Genotype", "Population", "Plant.area", "Herbivory")#
    dat$pivars <- c("sampleID", "Timepoint", "Plant")#
    dat$pool_sum_formula <- formula(cbind(Clo, #
                                          En, #
                                          Be, #
                                          Pl, #
                                          Ca, #
                                          Virotic, #
                                          Curly, #
                                          Yellow, #
                                          Herbivory, #
                                          Timepoint) ~ Plant)#
    dat$pool_min_formula <- formula(cbind(Genotype, Population) ~ Plant)#
    dat$pool_max_formula <- formula(Plant.area ~ Plant)#
    dat$grouping_var <- "Plant"#
#
    Ydat <- dat_tmp[, yvars]#
    Ydat <- apply(Ydat, 2, as.numeric)#
    if (!all(apply(Ydat, 2, is.numeric))) {#
        stop("Y is not numeric")#
    }#
#
    Xdat <- dat[, xvars]#
    Xdat <- apply(Xdat, 2, as.numeric)#
    Xdat <- data.frame(Xdat)#
    if (!all(apply(Xdat, 2, is.numeric))) {#
        stop("X is not numeric")#
    }#
    PIdat <- dat[, pivars]#
    if  ( any(unlist(strsplit(as.character(PIdat[1, "Plant"]), split = "")) == "S") ) {#
        PIdat[, "Plant"] <- sub(pattern = "S", #
                                replacement = "", #
                                x = PIdat[, "Plant"])#
    }#
    PIdat <- apply(PIdat, 2, as.numeric)#
    if (!all(apply(PIdat, 2, is.numeric))) {#
        stop("PI is not numeric")#
    }#
#
    if (save_all) {#
        saveRDS(Ydat, file = file.path(mod_dat_path, "Y.rds"))#
        saveRDS(Xdat, file = file.path(mod_dat_path, "X.rds"))#
        saveRDS(PIdat, file = file.path(mod_dat_path, "PI.rds"))#
    }#
#
    dat$Y <- Ydat#
    dat$X <- Xdat#
    dat$PI <- PIdat#
    return(dat)#
#
}
dat1 <- data_prep(filename = "TRAP17.csv",#
                  dirs = dirs)
filename = "TRAP17.csv"
dirs = dirs
dat <- structure(list(dat = NULL, #
                          yvars = NULL, #
                          xvars = NULL,#
                          pivars = NULL,#
                          pool_sum_formula = NULL,#
                          pool_min_formula = NULL,#
                          pool_max_formula = NULL,#
                          grouping_var = NULL), #
                     class = "trapdata")
datapath <- filename
datapath
(!file.exists(datapath))
datapath <- file.path(dirs$dat, filename)
file.path(dirs$dat, filename)
dat1 <- data_prep(filename = "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/data/TRAP17.csv",
dirs = dirs)
dat1 <- data_prep(filename = "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17/data/TRAP17.csv",
dirs = dirs)
dat1 <- data_prep(filename = "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17/data/TRAP17.csv",#
                  dirs = dirs)
dadap <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17/data/TRAP17.csv"
dirs
rm(list = ls(all = TRUE)) #
gc()
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
install("trap17")#
library("trap17")
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
install("trap17")#
library("trap17")
dirs <- set_dirs(working_dir = working_dir)
dirs
dirs <- set_dirs(working_dir = working_dir)
saveRDS(dirs, file = file.path(working_dir, "dirs.rds"))
dadap <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17/data/TRAP17.csv"
dirs
dat_tmp <- process_data(dat = dat1,#
                        dirs = dirs,#
                        save_all = TRUE, #
                        return_list = TRUE)
rm(list = ls(all = TRUE)) #
gc()#
#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
install("trap17")
library("trap17")
dirs <- set_dirs(working_dir = working_dir)
dadap <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17/data/TRAP17.csv"#
dat1 <- data_prep(filename = dadap,#
                  dirs = dirs)
rm(list = ls(all = TRUE)) #
gc()
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
install("trap17")
library("trap17")
dirs <- set_dirs(working_dir = working_dir)
dadap <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17/data/TRAP17.csv"#
dat1 <- data_prep(filename = dadap,#
                  dirs = dirs)
?trap17
??trap17
library("trap17")
?set_dirs
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()
setwd("..")
install("trap17")#
library("trap17")
rm(list = ls(all = TRUE)) #
gc()#
#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
install("trap17")#
library("trap17")
library("trap17")
dirs <- set_dirs(working_dir = working_dir)
dadap <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17/data/TRAP17.csv"#
dat1 <- data_prep(filename = dadap,#
                  dirs = dirs)
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")
rm(list = ls(all = TRUE)) #
gc()#
#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
install("trap17")
library("trap17")#
dirs <- set_dirs(working_dir = working_dir)#
saveRDS(dirs, file = file.path(working_dir, "dirs.rds"))
dadap <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17/data/TRAP17.csv"#
dat1 <- data_prep(filename = dadap,#
                  dirs = dirs)
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")
rm(list = ls(all = TRUE)) #
gc()#
#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
install("trap17")
rm(list = ls(all = TRUE)) #
gc()#
#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
library("trap17")
dirs <- set_dirs(working_dir = working_dir)#
saveRDS(dirs, file = file.path(working_dir, "dirs.rds"))#
#
#1.1a process data#
dadap <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pipeline/trap17/data/TRAP17.csv"#
dat1 <- data_prep(filename = dadap,#
                  dirs = dirs)
dirs
dadap <- "TRAP17.csv"#
dat1 <- data_prep(filename = dadap,#
                  dirs = dirs)
dat1
is(dat1)
is(dat1)
str(dat1)
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")
rm(list = ls(all = TRUE)) #
gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
library("trap17")#
dirs <- set_dirs(working_dir = working_dir)#
saveRDS(dirs, file = file.path(working_dir, "dirs.rds"))#
#
#1.1a process data#
dadap <- "TRAP17.csv"#
dat1 <- data_prep(filename = dadap,#
                  dirs = dirs)#
str(dat1)
dat<-dat1
dfr <- data.frame(cbind(dat$X, dat$Y, dat$PI))
pool_sum <- aggregate(formula = dat$pool_sum_formula, data = dfr, FUN = sum)#
    pool_min <- aggregate(formula = dat$pool_min_formula, data = dfr, FUN = min)#
    pool_max <- aggregate(formula = dat$pool_max_formula, data = dfr, FUN = max)#
    pooled1 <- merge(pool_sum, pool_min, by = dat$grouping_var, all = TRUE)#
    pooled <- merge(pooled1, pool_max, by = dat$grouping_var, all = TRUE)
Y_pooled <- as.matrix(pooled[, intersect(colnames(dat$Y), colnames(pooled))])#
    X_pooled <- as.matrix(pooled[, intersect(colnames(dat$X), colnames(pooled))])#
    PI_pooled <- as.matrix(pooled[, intersect(colnames(dat$PI), colnames(pooled))])
PI_pooled
colnames(pooled)
dat$pool_sum_formula
dat$PI
dfr <- data.frame(cbind(dat$X, dat$Y, dat$PI))#
#
    pool_sum <- aggregate(formula = dat$pool_sum_formula, data = dfr, FUN = sum)#
    pool_min <- aggregate(formula = dat$pool_min_formula, data = dfr, FUN = min)#
    pool_max <- aggregate(formula = dat$pool_max_formula, data = dfr, FUN = max)#
    pooled1 <- merge(pool_sum, pool_min, by = dat$grouping_var, all = TRUE)#
    pooled <- merge(pooled1, pool_max, by = dat$grouping_var, all = TRUE)#
#
    Y_pooled <- as.matrix(pooled[, intersect(colnames(dat$Y), colnames(pooled))])#
    X_pooled <- as.matrix(pooled[, intersect(colnames(dat$X), colnames(pooled))])#
    PI_pooled <- as.matrix(pooled[, intersect(colnames(dat$PI), colnames(pooled))])#
#
    Y_pooled <- 1 * (Y_pooled > 0)
X_pooled
Y_pooled
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")
rm(list = ls(all = TRUE)) #
gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
library("trap17")#
dirs <- set_dirs(working_dir = working_dir)#
saveRDS(dirs, file = file.path(working_dir, "dirs.rds"))#
#
#1.1a process data#
dadap <- "TRAP17.csv"#
full_data <- data_prep(filename = dadap,#
                       dirs = dirs)#
#
dat_pooled <- pool(dat = full_data,#
                   dirs = dirs,#
                   save_all = TRUE, #
                   return_list = TRUE)
full_data
dat_pooled <- pool(dat = full_data,#
                   dirs = dirs,#
                   save_data = TRUE, #
                   return_data = TRUE)
dat_pooled
str(dat_pooled)
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")
rm(list = ls(all = TRUE)) #
gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
library("trap17")#
dirs <- set_dirs(working_dir = working_dir)#
saveRDS(dirs, file = file.path(working_dir, "dirs.rds"))#
#
#1.1a process data#
dadap <- "TRAP17.csv"#
dat <- process_data(filename = dadap,#
                    dirs = dirs,#
                    return_data = TRUE)
str(dat)
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")
rm(list = ls(all = TRUE)) #
gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
library("trap17")#
dirs <- set_dirs(working_dir = working_dir)#
saveRDS(dirs, file = file.path(working_dir, "dirs.rds"))#
#
#1.1a process data#
dadap <- "TRAP17.csv"#
dat <- process_data(filename = dadap,#
                    dirs = dirs,#
                    return_data = TRUE)#
#
str(dat)
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")
?data
sampling_settings1 <- sampling_settings(totsamp = 100,#
                                        trans = 50,#
                                        thn = 1,#
                                        nfolds = 2)
rm(list = ls(all = TRUE)) #
gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
library("trap17")#
dirs <- set_dirs(working_dir = working_dir)
dadap <- "TRAP17.csv"#
dat <- process_data(filename = dadap,#
                    dirs = dirs,#
                    return_data = TRUE)#
#
str(dat)
sampling_settings1 <- sampling_settings(totsamp = 100,#
                                        trans = 50,#
                                        thn = 1,#
                                        nfolds = 2)
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()#
setwd("..")#
#
install("trap17")
rm(list = ls(all = TRUE)) #
gc()#
working_dir <- "/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg"#
setwd(working_dir)#
library("trap17")
dirs <- set_dirs(working_dir = working_dir)
dadap <- "TRAP17.csv"#
dat <- process_data(filename = dadap,#
                    dirs = dirs,#
                    return_data = TRUE)#
#
str(dat)
sampling_settings1 <- sampling_settings(totsamp = 100,#
                                        trans = 50,#
                                        thn = 1,#
                                        nfolds = 2)
#' Sampling settings#
#'#
#' Set settings for MCMC sampling#
#' @param totsamp Number of MCMC samples#
#' @param trans Number of transition MCMC samples#
#' @param thn Thinning of MCMC samples#
#' @param nfolds Number of folds for cross-validation#
#' @return List of settings to be passed on for MCMC sampling#
#' @export#
#
sampling_settings <- function (totsamp = 100,#
                               trans = 50,#
                               thn = 1,#
                               nfolds = 2)#
{#
    res <- structure(list(totsamp = NULL, #
                          trans = NULL, #
                          thn = NULL, #
                          nfolds = NULL), #
                     class = "mcmcsettings")#
    res$totsamp <- totsamp#
    res$trans <- trans#
    res$thn <- thn#
    res$nfolds <- nfolds#
    return(res)#
}
sampling_settings1 <- sampling_settings(totsamp = 100,#
                                        trans = 50,#
                                        thn = 1,#
                                        nfolds = 2)
sampling_settings1
vars
vars <- set_vars(study = "trap",#
                         fit = 4,#
                         sampling = sampling)
sampling <- sampling_settings(totsamp = 100,#
                              trans = 50,#
                              thn = 1,#
                              nfolds = 2)
vars <- set_vars(study = "trap",#
                         fit = 4,#
                         sampling = sampling)
vars
str(res)
str(dat)
head(dat$Y)
head(dat$X)
vars$study
dfr <- data.frame(dat$Y_pooled, dat$X_pooled, dat$PI_pooled)#
    Y <- data.frame(dfr[,vars$yvars])
names(Y) <- vars$yvars
dfr <- data.frame(dat$Y_pooled, dat$X_pooled, dat$PI_pooled)#
    Y <- data.frame(dfr[,vars$yvars])
names(Y)
(all(!is.na(vars$xvars)))
vars
vars$dumvars
vars
vars$totsamp
vars$nfolds
create_name
vars$study
Hmsc::createPartition
create_name
vars
create_name
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")
document()
document()
rm(list = ls(all = TRUE)) #
gc()#
#install.packages("devtools")#
library("devtools")#
#install_github("klutometis/roxygen")#
library(roxygen2)#
#setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg")#
#create("trap17")#
setwd("/Users/anorberg/Documents/Zurich/UZH/TRAP/pkg/trap17")#
document()
? load_code
document()
